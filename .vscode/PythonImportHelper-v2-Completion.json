[
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "resolve",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "RegexValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "RegexValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "RegexValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "mixins",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "create_code",
        "importPath": "accounts.helpers",
        "description": "accounts.helpers",
        "isExtraImport": true,
        "detail": "accounts.helpers",
        "documentation": {}
    },
    {
        "label": "create_code",
        "importPath": "accounts.helpers",
        "description": "accounts.helpers",
        "isExtraImport": true,
        "detail": "accounts.helpers",
        "documentation": {}
    },
    {
        "label": "create_code",
        "importPath": "accounts.helpers",
        "description": "accounts.helpers",
        "isExtraImport": true,
        "detail": "accounts.helpers",
        "documentation": {}
    },
    {
        "label": "OtpCode",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "OtpCode",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "OtpCode",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "OtpCode",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "OtpCode",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "send_sms",
        "importPath": "sms.helpers",
        "description": "sms.helpers",
        "isExtraImport": true,
        "detail": "sms.helpers",
        "documentation": {}
    },
    {
        "label": "send_sms",
        "importPath": "sms.helpers",
        "description": "sms.helpers",
        "isExtraImport": true,
        "detail": "sms.helpers",
        "documentation": {}
    },
    {
        "label": "send_sms",
        "importPath": "sms.helpers",
        "description": "sms.helpers",
        "isExtraImport": true,
        "detail": "sms.helpers",
        "documentation": {}
    },
    {
        "label": "send_sms",
        "importPath": "sms.helpers",
        "description": "sms.helpers",
        "isExtraImport": true,
        "detail": "sms.helpers",
        "documentation": {}
    },
    {
        "label": "SMS_TEXTS",
        "importPath": "sms.sms_texts",
        "description": "sms.sms_texts",
        "isExtraImport": true,
        "detail": "sms.sms_texts",
        "documentation": {}
    },
    {
        "label": "SMS_TEXTS",
        "importPath": "sms.sms_texts",
        "description": "sms.sms_texts",
        "isExtraImport": true,
        "detail": "sms.sms_texts",
        "documentation": {}
    },
    {
        "label": "SMS_TEXTS",
        "importPath": "sms.sms_texts",
        "description": "sms.sms_texts",
        "isExtraImport": true,
        "detail": "sms.sms_texts",
        "documentation": {}
    },
    {
        "label": "SMS_TEXTS",
        "importPath": "sms.sms_texts",
        "description": "sms.sms_texts",
        "isExtraImport": true,
        "detail": "sms.sms_texts",
        "documentation": {}
    },
    {
        "label": "mobile_regex",
        "importPath": "utils.validator",
        "description": "utils.validator",
        "isExtraImport": true,
        "detail": "utils.validator",
        "documentation": {}
    },
    {
        "label": "mobile_regex",
        "importPath": "utils.validator",
        "description": "utils.validator",
        "isExtraImport": true,
        "detail": "utils.validator",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "GenericViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "accounts.api.serializers",
        "description": "accounts.api.serializers",
        "isExtraImport": true,
        "detail": "accounts.api.serializers",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django_filters",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django_filters",
        "description": "django_filters",
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Concat",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Concat",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Concat",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Concat",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Concat",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Concat",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "unidecode",
        "importPath": "unidecode",
        "description": "unidecode",
        "isExtraImport": true,
        "detail": "unidecode",
        "documentation": {}
    },
    {
        "label": "unidecode",
        "importPath": "unidecode",
        "description": "unidecode",
        "isExtraImport": true,
        "detail": "unidecode",
        "documentation": {}
    },
    {
        "label": "unidecode",
        "importPath": "unidecode",
        "description": "unidecode",
        "isExtraImport": true,
        "detail": "unidecode",
        "documentation": {}
    },
    {
        "label": "unidecode",
        "importPath": "unidecode",
        "description": "unidecode",
        "isExtraImport": true,
        "detail": "unidecode",
        "documentation": {}
    },
    {
        "label": "unidecode",
        "importPath": "unidecode",
        "description": "unidecode",
        "isExtraImport": true,
        "detail": "unidecode",
        "documentation": {}
    },
    {
        "label": "unidecode",
        "importPath": "unidecode",
        "description": "unidecode",
        "isExtraImport": true,
        "detail": "unidecode",
        "documentation": {}
    },
    {
        "label": "unidecode",
        "importPath": "unidecode",
        "description": "unidecode",
        "isExtraImport": true,
        "detail": "unidecode",
        "documentation": {}
    },
    {
        "label": "unidecode",
        "importPath": "unidecode",
        "description": "unidecode",
        "isExtraImport": true,
        "detail": "unidecode",
        "documentation": {}
    },
    {
        "label": "unidecode",
        "importPath": "unidecode",
        "description": "unidecode",
        "isExtraImport": true,
        "detail": "unidecode",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "LogoutView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "SetPasswordForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseForbidden",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "FormView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DeleteView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DeleteView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DeleteView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DetailView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DeleteView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DeleteView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DetailView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DeleteView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DetailView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DeleteView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DetailView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DeleteView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "AnonymousUserMixin",
        "importPath": "acl.mixins",
        "description": "acl.mixins",
        "isExtraImport": true,
        "detail": "acl.mixins",
        "documentation": {}
    },
    {
        "label": "CheckPasswordResetExpirationMixin",
        "importPath": "acl.mixins",
        "description": "acl.mixins",
        "isExtraImport": true,
        "detail": "acl.mixins",
        "documentation": {}
    },
    {
        "label": "VerifiedUserMixin",
        "importPath": "acl.mixins",
        "description": "acl.mixins",
        "isExtraImport": true,
        "detail": "acl.mixins",
        "documentation": {}
    },
    {
        "label": "StaffUserRequiredMixin",
        "importPath": "acl.mixins",
        "description": "acl.mixins",
        "isExtraImport": true,
        "detail": "acl.mixins",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ACL.models",
        "description": "ACL.models",
        "isExtraImport": true,
        "detail": "ACL.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ACL.models",
        "description": "ACL.models",
        "isExtraImport": true,
        "detail": "ACL.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ACL.models",
        "description": "ACL.models",
        "isExtraImport": true,
        "detail": "ACL.models",
        "documentation": {}
    },
    {
        "label": "Role",
        "importPath": "ACL.models",
        "description": "ACL.models",
        "isExtraImport": true,
        "detail": "ACL.models",
        "documentation": {}
    },
    {
        "label": "PERMISSIONS",
        "importPath": "ACL.permissions",
        "description": "ACL.permissions",
        "isExtraImport": true,
        "detail": "ACL.permissions",
        "documentation": {}
    },
    {
        "label": "PERMISSIONS",
        "importPath": "ACL.permissions",
        "description": "ACL.permissions",
        "isExtraImport": true,
        "detail": "ACL.permissions",
        "documentation": {}
    },
    {
        "label": "ROLE_CODES",
        "importPath": "ACL.permissions",
        "description": "ACL.permissions",
        "isExtraImport": true,
        "detail": "ACL.permissions",
        "documentation": {}
    },
    {
        "label": "PERMISSIONS",
        "importPath": "ACL.permissions",
        "description": "ACL.permissions",
        "isExtraImport": true,
        "detail": "ACL.permissions",
        "documentation": {}
    },
    {
        "label": "ROLE_CODES",
        "importPath": "ACL.permissions",
        "description": "ACL.permissions",
        "isExtraImport": true,
        "detail": "ACL.permissions",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "UserPassesTestMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "UserPassesTestMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "CustomModel",
        "importPath": "utils.models",
        "description": "utils.models",
        "isExtraImport": true,
        "detail": "utils.models",
        "documentation": {}
    },
    {
        "label": "PermissionFilters",
        "importPath": "ACL.filters",
        "description": "ACL.filters",
        "isExtraImport": true,
        "detail": "ACL.filters",
        "documentation": {}
    },
    {
        "label": "RoleFilters",
        "importPath": "ACL.filters",
        "description": "ACL.filters",
        "isExtraImport": true,
        "detail": "ACL.filters",
        "documentation": {}
    },
    {
        "label": "UserRoleFilters",
        "importPath": "ACL.filters",
        "description": "ACL.filters",
        "isExtraImport": true,
        "detail": "ACL.filters",
        "documentation": {}
    },
    {
        "label": "RoleForm",
        "importPath": "ACL.forms",
        "description": "ACL.forms",
        "isExtraImport": true,
        "detail": "ACL.forms",
        "documentation": {}
    },
    {
        "label": "PermissionForm",
        "importPath": "ACL.forms",
        "description": "ACL.forms",
        "isExtraImport": true,
        "detail": "ACL.forms",
        "documentation": {}
    },
    {
        "label": "UserRoleForm",
        "importPath": "ACL.forms",
        "description": "ACL.forms",
        "isExtraImport": true,
        "detail": "ACL.forms",
        "documentation": {}
    },
    {
        "label": "SuperUserRequiredMixin",
        "importPath": "ACL.mixins",
        "description": "ACL.mixins",
        "isExtraImport": true,
        "detail": "ACL.mixins",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "status_content_CHOICES",
        "importPath": "content.helpers",
        "description": "content.helpers",
        "isExtraImport": true,
        "detail": "content.helpers",
        "documentation": {}
    },
    {
        "label": "type_content_CHOICES",
        "importPath": "content.helpers",
        "description": "content.helpers",
        "isExtraImport": true,
        "detail": "content.helpers",
        "documentation": {}
    },
    {
        "label": "status_content_CHOICES",
        "importPath": "content.helpers",
        "description": "content.helpers",
        "isExtraImport": true,
        "detail": "content.helpers",
        "documentation": {}
    },
    {
        "label": "jalali_converter",
        "importPath": "extenstions.utils",
        "description": "extenstions.utils",
        "isExtraImport": true,
        "detail": "extenstions.utils",
        "documentation": {}
    },
    {
        "label": "jalali_converter",
        "importPath": "extenstions.utils",
        "description": "extenstions.utils",
        "isExtraImport": true,
        "detail": "extenstions.utils",
        "documentation": {}
    },
    {
        "label": "jalali_converter",
        "importPath": "extenstions.utils",
        "description": "extenstions.utils",
        "isExtraImport": true,
        "detail": "extenstions.utils",
        "documentation": {}
    },
    {
        "label": "jalali_converter",
        "importPath": "extenstions.utils",
        "description": "extenstions.utils",
        "isExtraImport": true,
        "detail": "extenstions.utils",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "content.models",
        "description": "content.models",
        "isExtraImport": true,
        "detail": "content.models",
        "documentation": {}
    },
    {
        "label": "Content",
        "importPath": "content.models",
        "description": "content.models",
        "isExtraImport": true,
        "detail": "content.models",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "OrderForm",
        "importPath": "order.forms",
        "description": "order.forms",
        "isExtraImport": true,
        "detail": "order.forms",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdminUser",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "order.api.serializers",
        "description": "order.api.serializers",
        "isExtraImport": true,
        "detail": "order.api.serializers",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "order.models",
        "description": "order.models",
        "isExtraImport": true,
        "detail": "order.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "order.models",
        "description": "order.models",
        "isExtraImport": true,
        "detail": "order.models",
        "documentation": {}
    },
    {
        "label": "type_project_CHOICES",
        "importPath": "order.helpers",
        "description": "order.helpers",
        "isExtraImport": true,
        "detail": "order.helpers",
        "documentation": {}
    },
    {
        "label": "status_CHOICES",
        "importPath": "order.helpers",
        "description": "order.helpers",
        "isExtraImport": true,
        "detail": "order.helpers",
        "documentation": {}
    },
    {
        "label": "city_CHOICES",
        "importPath": "order.helpers",
        "description": "order.helpers",
        "isExtraImport": true,
        "detail": "order.helpers",
        "documentation": {}
    },
    {
        "label": "status_CHOICES",
        "importPath": "order.helpers",
        "description": "order.helpers",
        "isExtraImport": true,
        "detail": "order.helpers",
        "documentation": {}
    },
    {
        "label": "RestPermissionMixin",
        "importPath": "acl.rest_mixin",
        "description": "acl.rest_mixin",
        "isExtraImport": true,
        "detail": "acl.rest_mixin",
        "documentation": {}
    },
    {
        "label": "SmsGroupSerializer",
        "importPath": "sms.api.serializers",
        "description": "sms.api.serializers",
        "isExtraImport": true,
        "detail": "sms.api.serializers",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "kavenegar",
        "description": "kavenegar",
        "isExtraImport": true,
        "detail": "kavenegar",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "kavenegar",
        "description": "kavenegar",
        "isExtraImport": true,
        "detail": "kavenegar",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "User.models",
        "description": "User.models",
        "isExtraImport": true,
        "detail": "User.models",
        "documentation": {}
    },
    {
        "label": "pisa",
        "importPath": "xhtml2pdf",
        "description": "xhtml2pdf",
        "isExtraImport": true,
        "detail": "xhtml2pdf",
        "documentation": {}
    },
    {
        "label": "get_template",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "html",
        "description": "html",
        "isExtraImport": true,
        "detail": "html",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "about_us.migrations.0001_initial",
        "description": "about_us.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='About_us',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('image', models.ImageField(upload_to='1.png', verbose_name='تصویر')),",
        "detail": "about_us.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "AboutUsConfig",
        "kind": 6,
        "importPath": "about_us.apps",
        "description": "about_us.apps",
        "peekOfCode": "class AboutUsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'about_us'",
        "detail": "about_us.apps",
        "documentation": {}
    },
    {
        "label": "About_us",
        "kind": 6,
        "importPath": "about_us.models",
        "description": "about_us.models",
        "peekOfCode": "class About_us(models.Model):\n    image = models.ImageField(upload_to='1.png', verbose_name=\"تصویر\")\n    addr = models.TextField(verbose_name=\"ادرس\")\n    tel = models.CharField(max_length=150, verbose_name=\"تلفن\")\n    desc = models.TextField(verbose_name=\"توضیحات\")\n    def __str__(self):\n        return f\"{self.tel}\"\n    class Meta:\n        verbose_name = \"درباره ما\"\n        verbose_name_plural = \"درباره ما\"",
        "detail": "about_us.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "about_us.urls",
        "description": "about_us.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.AboutUsView.as_view(), name=\"about_us\")\n]",
        "detail": "about_us.urls",
        "documentation": {}
    },
    {
        "label": "AboutUsView",
        "kind": 6,
        "importPath": "about_us.views",
        "description": "about_us.views",
        "peekOfCode": "class AboutUsView(View):\n    template_name = 'about_us/about_us.html'\n    def get(self, request, *args, **kwargs):\n        about_us = About_us.objects.all()\n        context = {'about_us': about_us}\n        return render(request, self.template_name, context)",
        "detail": "about_us.views",
        "documentation": {}
    },
    {
        "label": "OtpCodeSerializer",
        "kind": 6,
        "importPath": "accounts.api.serializers",
        "description": "accounts.api.serializers",
        "peekOfCode": "class OtpCodeSerializer(serializers.Serializer):\n    code = serializers.CharField(max_length=6, min_length=6, required=False, validators=[RegexValidator(\n        regex=r'^-?\\d+\\Z',\n        message=\"کد تایید باید عددی باشد\",\n    )])\n    phone_number = serializers.CharField(max_length=11, min_length=11, required=True, validators=[mobile_regex])\n    def save(self, **kwargs):\n        phone_number = self.validated_data.get('phone_number')\n        user = User.objects.filter(phone_number=phone_number).first()\n        if not user:",
        "detail": "accounts.api.serializers",
        "documentation": {}
    },
    {
        "label": "OtpCodeConfirmSerializer",
        "kind": 6,
        "importPath": "accounts.api.serializers",
        "description": "accounts.api.serializers",
        "peekOfCode": "class OtpCodeConfirmSerializer(serializers.Serializer):\n    code = serializers.CharField(max_length=6, min_length=6, required=True, validators=[RegexValidator(\n        regex=r'^-?\\d+\\Z',\n        message=\"کد تایید باید عددی باشد\",\n    )])\n    phone_number = serializers.CharField(max_length=11, min_length=11, required=True, validators=[mobile_regex])\n    def save(self, **kwargs):\n        phone_number = self.validated_data.get('phone_number')\n        code = create_code()\n        user = User.objects.filter(phone_number=phone_number).first()",
        "detail": "accounts.api.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "accounts.api.serializers",
        "description": "accounts.api.serializers",
        "peekOfCode": "User = get_user_model()\nclass OtpCodeSerializer(serializers.Serializer):\n    code = serializers.CharField(max_length=6, min_length=6, required=False, validators=[RegexValidator(\n        regex=r'^-?\\d+\\Z',\n        message=\"کد تایید باید عددی باشد\",\n    )])\n    phone_number = serializers.CharField(max_length=11, min_length=11, required=True, validators=[mobile_regex])\n    def save(self, **kwargs):\n        phone_number = self.validated_data.get('phone_number')\n        user = User.objects.filter(phone_number=phone_number).first()",
        "detail": "accounts.api.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "accounts.api.urls",
        "description": "accounts.api.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(\"\", UserAuthVS, \"auth\")\nurlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "accounts.api.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "accounts.api.urls",
        "description": "accounts.api.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "accounts.api.urls",
        "documentation": {}
    },
    {
        "label": "UserAuthVS",
        "kind": 6,
        "importPath": "accounts.api.views",
        "description": "accounts.api.views",
        "peekOfCode": "class UserAuthVS(GenericViewSet):\n    @action(\n        methods=[\"get\", \"post\"],\n        detail=False,\n        url_path=\"code/send\",\n        serializer_class=OtpCodeSerializer,\n    )\n    def code_send(self, request):\n        serializer = self.serializer_class(data=request.data)\n        serializer.is_valid()",
        "detail": "accounts.api.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "accounts.api.views",
        "description": "accounts.api.views",
        "peekOfCode": "User = get_user_model()\nclass UserAuthVS(GenericViewSet):\n    @action(\n        methods=[\"get\", \"post\"],\n        detail=False,\n        url_path=\"code/send\",\n        serializer_class=OtpCodeSerializer,\n    )\n    def code_send(self, request):\n        serializer = self.serializer_class(data=request.data)",
        "detail": "accounts.api.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0001_initial",
        "description": "accounts.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('password', models.CharField(max_length=128, verbose_name='password')),",
        "detail": "accounts.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "AccountsConfig",
        "kind": 6,
        "importPath": "accounts.apps",
        "description": "accounts.apps",
        "peekOfCode": "class AccountsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'accounts'\n    verbose_name = ' ماژول حساب کاربری'",
        "detail": "accounts.apps",
        "documentation": {}
    },
    {
        "label": "UserFilters",
        "kind": 6,
        "importPath": "accounts.filters",
        "description": "accounts.filters",
        "peekOfCode": "class UserFilters(filters.FilterSet):\n    search = filters.CharFilter(method=\"search_filter\")\n    status = filters.CharFilter(method=\"status_filter\")\n    admin = filters.CharFilter(method=\"admin_filter\")\n    limit = filters.CharFilter(method=\"limit_filter\")\n    @staticmethod\n    def search_filter(qs, name, value):\n        qs = qs.filter(\n            Q(email__icontains=value) |\n            Q(phone_number__icontains=value) |",
        "detail": "accounts.filters",
        "documentation": {}
    },
    {
        "label": "UserForm",
        "kind": 6,
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "peekOfCode": "class UserForm(forms.ModelForm):\n    password = forms.CharField(label='رمز عبور', required=True)\n    class Meta:\n        model = User\n        fields = ['phone_number', 'email', 'full_name', 'is_admin', 'password']\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        if self.instance.id:\n            self.fields.pop('password')\n    def save(self, commit=True):",
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "RegisterForm",
        "kind": 6,
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "peekOfCode": "class RegisterForm(forms.ModelForm):\n    password2 = forms.CharField(max_length=100, required=True, widget=forms.PasswordInput(), label='تکرار رمز عبور')\n    class Meta:\n        model = User\n        fields = ['full_name', 'phone_number', 'email', 'password', 'password2']\n    def __init__(self, *args, **kwargs):\n        self.request = kwargs.pop('request')\n        super().__init__(*args, **kwargs)\n        self.fields['password'].widget = forms.PasswordInput()\n    def clean_password2(self):",
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "PasswordResetForm",
        "kind": 6,
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "peekOfCode": "class PasswordResetForm(forms.ModelForm):\n    phone_number = forms.CharField(label='شماره موبایل کاربر', required=True, min_length=11,\n                                   max_length=11, validators=[mobile_regex])\n    class Meta:\n        model = OtpCode\n        fields = ['phone_number']\n    def __init__(self, *args, **kwargs):\n        self.request = kwargs.pop('request')\n        super().__init__(*args, **kwargs)\n    def clean_phone_number(self):",
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "OtpCodeForm",
        "kind": 6,
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "peekOfCode": "class OtpCodeForm(forms.Form):\n    code = forms.CharField(label='کد تایید', required=True, min_length=6, max_length=6, validators=[RegexValidator(\n        regex=r'^-?\\d+\\Z',\n        message=\"کد تایید باید عددی باشد.\",\n    )])\n    phone_number = forms.CharField(label='شماره موبایل کاربر', required=True, widget=forms.HiddenInput, min_length=11,\n                                   max_length=11, validators=[mobile_regex])\n    class Meta:\n        model = OtpCode\n        fields = ['code', 'phone_number']",
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "peekOfCode": "User = get_user_model()\nclass UserForm(forms.ModelForm):\n    password = forms.CharField(label='رمز عبور', required=True)\n    class Meta:\n        model = User\n        fields = ['phone_number', 'email', 'full_name', 'is_admin', 'password']\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        if self.instance.id:\n            self.fields.pop('password')",
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "check_user_exist",
        "kind": 2,
        "importPath": "accounts.helpers",
        "description": "accounts.helpers",
        "peekOfCode": "def check_user_exist(new_phone):\n    if User.objects.filter(phone_number=new_phone).exists():\n        raise ValidationError([\n            ValidationError('این شماره موبایل قبلا ثبت شده است!', code='phone_number'),\n        ])\ndef check_reset_password_sent(user):\n    reset_password = user.password_resets.last()\n    if reset_password:\n        today = timezone.now()\n        expiration = reset_password.created_at + timedelta(minutes=1)",
        "detail": "accounts.helpers",
        "documentation": {}
    },
    {
        "label": "check_reset_password_sent",
        "kind": 2,
        "importPath": "accounts.helpers",
        "description": "accounts.helpers",
        "peekOfCode": "def check_reset_password_sent(user):\n    reset_password = user.password_resets.last()\n    if reset_password:\n        today = timezone.now()\n        expiration = reset_password.created_at + timedelta(minutes=1)\n        if today > expiration:\n            return True\n        return False\n    return True\ndef check_login_code_sent(user):",
        "detail": "accounts.helpers",
        "documentation": {}
    },
    {
        "label": "check_login_code_sent",
        "kind": 2,
        "importPath": "accounts.helpers",
        "description": "accounts.helpers",
        "peekOfCode": "def check_login_code_sent(user):\n    login_code = user.login_codes.last()\n    if login_code:\n        today = timezone.now()\n        expiration = login_code.created_at + timedelta(minutes=1)\n        if today > expiration:\n            return True\n        return False\n    return True\ndef check_code_expiration(code):",
        "detail": "accounts.helpers",
        "documentation": {}
    },
    {
        "label": "check_code_expiration",
        "kind": 2,
        "importPath": "accounts.helpers",
        "description": "accounts.helpers",
        "peekOfCode": "def check_code_expiration(code):\n    code = OtpCode.objects.filter(code=code).first()\n    if code and not code.is_used:\n        today = timezone.now()\n        expiration = code.created_at + timedelta(minutes=1)\n        if today > expiration:\n            return False\n        return True\n    return False\ndef create_code():",
        "detail": "accounts.helpers",
        "documentation": {}
    },
    {
        "label": "create_code",
        "kind": 2,
        "importPath": "accounts.helpers",
        "description": "accounts.helpers",
        "peekOfCode": "def create_code():\n    return ''.join([str(random.randint(0, 9)) for item in range(6)])",
        "detail": "accounts.helpers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "accounts.helpers",
        "description": "accounts.helpers",
        "peekOfCode": "User = get_user_model()\ndef check_user_exist(new_phone):\n    if User.objects.filter(phone_number=new_phone).exists():\n        raise ValidationError([\n            ValidationError('این شماره موبایل قبلا ثبت شده است!', code='phone_number'),\n        ])\ndef check_reset_password_sent(user):\n    reset_password = user.password_resets.last()\n    if reset_password:\n        today = timezone.now()",
        "detail": "accounts.helpers",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "accounts.managers",
        "description": "accounts.managers",
        "peekOfCode": "class UserManager(BaseUserManager):\n    def create_user(self, phone_number, email, password):\n        if not phone_number:\n            raise ValueError('شماره تلفن برای کاربر الزامی هست.')\n        if not email:\n            raise ValueError('ایمیل برای کاربر الزامی هست.')\n        # if not full_name:\n        #     raise ValueError('نام و نام خانوادگی برای کاربر الزامی هست.')\n        user = self.model(phone_number=phone_number, email=self.normalize_email(email))\n        user.set_password(password)",
        "detail": "accounts.managers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class User(AbstractBaseUser):\n    email = models.EmailField(\n        max_length=255, unique=True, verbose_name=\"ایمیل\")\n    phone_number = models.CharField(\n        max_length=11, unique=True, verbose_name=\"شماره تماس\")\n    full_name = models.CharField(\n        max_length=100, null=True, blank=True, verbose_name=\"نام و نام خانوادگی\")\n    is_active = models.BooleanField(\n        default=True, verbose_name=\"فعال / غیرفعال\")\n    is_admin = models.BooleanField(",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "OtpCodeManager",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class OtpCodeManager(models.Manager):\n    def create_new_code(self, user):\n        from accounts.helpers import create_code\n        user.codes.all().update(is_used=True)\n        return OtpCode.objects.create(code=create_code(), user=user)\nclass OtpCode(models.Model):\n    code = models.CharField(verbose_name='کد', max_length=6)\n    user = models.ForeignKey(verbose_name='کاربر', to=User, on_delete=models.CASCADE, related_name='codes', null=True)\n    is_used = models.BooleanField(verbose_name='آیا استفاده شده است', default=False)\n    created_at = models.DateTimeField(",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "OtpCode",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class OtpCode(models.Model):\n    code = models.CharField(verbose_name='کد', max_length=6)\n    user = models.ForeignKey(verbose_name='کاربر', to=User, on_delete=models.CASCADE, related_name='codes', null=True)\n    is_used = models.BooleanField(verbose_name='آیا استفاده شده است', default=False)\n    created_at = models.DateTimeField(\n        auto_now_add=True, null=True,\n        verbose_name=\"تاریخ ثبت\"\n    )\n    class Meta:\n        verbose_name = 'کد یکبار مصرف'",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "accounts.urls",
        "description": "accounts.urls",
        "peekOfCode": "urlpatterns = [\n    path('dashboard/user/list', UserDashboardList.as_view(), name='list_user'),\n    path('dashboard/user/create', UserCreateView.as_view(), name='create_user'),\n    path('dashboard/user/edit/<int:pk>', UserUpdateView.as_view(), name='update_user'),\n    path('dashboard/user/delete/<int:pk>', UserDeleteView.as_view(), name='delete_user'),\n    path('profile/', ProfileView.as_view(), name='profile'),\n    path('register/', RegisterView.as_view(), name='register'),\n    path('login/', LoginView.as_view(), name='login'),\n    path('verify/', VerifyCodeView.as_view(), name='verify-code'),\n    path('logout/', LogoutView.as_view(next_page=settings.LOGIN_URL), name='logout'),",
        "detail": "accounts.urls",
        "documentation": {}
    },
    {
        "label": "UserDashboardList",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class UserDashboardList(StaffUserRequiredMixin, View):\n    template_name = 'accounts/admin/list.html'\n    def get(self, request, *args, **kwargs):\n        context = {}\n        users = User.objects.all()\n        users = UserFilters(data=self.request.GET, queryset=users).qs\n        context['users'] = users\n        return render(request, self.template_name, context)\nclass UserCreateView(StaffUserRequiredMixin, CreateView):\n    form_class = UserForm",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "UserCreateView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class UserCreateView(StaffUserRequiredMixin, CreateView):\n    form_class = UserForm\n    template_name = 'accounts/admin/create_edit.html'\n    success_url = reverse_lazy('list_user')\n    def form_valid(self, form):\n        messages.success(self.request, 'کاربر با موفقیت ثبت شد.', 'success')\n        return super().form_valid(form)\nclass UserUpdateView(StaffUserRequiredMixin, UpdateView):\n    form_class = UserForm\n    template_name = 'accounts/admin/create_edit.html'",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "UserUpdateView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class UserUpdateView(StaffUserRequiredMixin, UpdateView):\n    form_class = UserForm\n    template_name = 'accounts/admin/create_edit.html'\n    model = User\n    success_url = reverse_lazy('list_user')\nclass UserDeleteView(StaffUserRequiredMixin, DeleteView):\n    model = User\n    template_name = 'accounts/admin/list.html'\n    success_url = reverse_lazy(\"list_user\")\n    def dispatch(self, *args, **kwargs):",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "UserDeleteView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class UserDeleteView(StaffUserRequiredMixin, DeleteView):\n    model = User\n    template_name = 'accounts/admin/list.html'\n    success_url = reverse_lazy(\"list_user\")\n    def dispatch(self, *args, **kwargs):\n        resp = super().dispatch(*args, **kwargs)\n        messages.success(self.request, 'آیتم مورد نظر با موفقیت حدف شد.')\n        return resp\n# Auth\nclass RegisterView(AnonymousUserMixin, CreateView):",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "RegisterView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class RegisterView(AnonymousUserMixin, CreateView):\n    template_name = \"accounts/register.html\"\n    model = User\n    form_class = RegisterForm\n    # success_url = reverse_lazy(\"verify-code\")\n    success_url = reverse_lazy(\"login\")\n    def post(self, request, *args, **kwargs):\n        request.POST._mutable = True\n        request.POST['phone_number'] = unidecode(request.POST.get('phone_number'))\n        return super().post(request, *args, **kwargs)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class LoginView(LoginViewAuto):\n    template_name = 'accounts/login.html'\n    redirect_authenticated_user = True\n    next_page = reverse_lazy('order:order_home')\n    success_url = reverse_lazy('order:order_home')\n    def post(self, request, *args, **kwargs):\n        request.POST._mutable = True\n        request.POST['username'] = unidecode(request.POST.get('username'))\n        return super().post(request, *args, **kwargs)\nclass ResetPasswordView(AnonymousUserMixin, CreateView):",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "ResetPasswordView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class ResetPasswordView(AnonymousUserMixin, CreateView):\n    template_name = \"accounts/reset_password/form.html\"\n    form_class = PasswordResetForm\n    success_url = reverse_lazy(\"password-reset-confirm\")\n    def post(self, request, *args, **kwargs):\n        request.POST._mutable = True\n        request.POST['phone_number'] = unidecode(request.POST.get('phone_number'))\n        return super().post(request, *args, **kwargs)\n    def get_form_kwargs(self):\n        kwargs = super().get_form_kwargs()",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "ResetPasswordEnterView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class ResetPasswordEnterView(AnonymousUserMixin, CheckPasswordResetExpirationMixin, CreateView):\n    template_name = \"accounts/reset_password/form.html\"\n    form_class = SetPasswordForm\n    success_url = reverse_lazy(\"login\")\n    def get_current_user(self):\n        code = get_object_or_404(OtpCode, code=self.request.session['reset_password_code'])\n        user = get_object_or_404(User, pk=code.user_id)\n        return user\n    def get(self, req):\n        user = self.get_current_user()",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "VerifyCodeView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class VerifyCodeView(AnonymousUserMixin, FormView):\n    template_name = \"accounts/verify_code.html\"\n    form_class = OtpCodeForm\n    def get_form_kwargs(self):\n        kwargs = super().get_form_kwargs()\n        kwargs.update({'request': self.request})\n        return kwargs\n    def form_valid(self, form):\n        form.save(True)\n        if resolve(self.request.path_info).url_name == 'password-reset-confirm':",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "ProfileView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class ProfileView(VerifiedUserMixin, UpdateView):\n    template_name = \"accounts/admin/profile.html\"\n    model = User\n    fields = ['email', 'full_name']\n    success_url = reverse_lazy(\"profile\")\n    # def get_form(self, form_class=None):\n    #     form = super().get_form(form_class)\n    #     form.fields['phone_number'].widget.attrs['readonly'] = True\n    #     return form\n    # def post(self, request, *args, **kwargs):",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "acl.management.commands.init_permissions",
        "description": "acl.management.commands.init_permissions",
        "peekOfCode": "class Command(BaseCommand):\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--clear',\n            action='store_true',\n            help='clear old states and cities',\n        )\n    def handle(self, *args, **options):\n        if options['clear']:\n            Permission.objects.all().delete()",
        "detail": "acl.management.commands.init_permissions",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "acl.management.commands.init_roles",
        "description": "acl.management.commands.init_roles",
        "peekOfCode": "class Command(BaseCommand):\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--clear',\n            action='store_true',\n            help='clear old states and cities',\n        )\n    def handle(self, *args, **options):\n        if options['clear']:\n            Role.objects.all().delete()",
        "detail": "acl.management.commands.init_roles",
        "documentation": {}
    },
    {
        "label": "STUDENT_PERMS",
        "kind": 5,
        "importPath": "acl.management.commands.init_roles",
        "description": "acl.management.commands.init_roles",
        "peekOfCode": "STUDENT_PERMS = [\n    'class_list',\n    'class_detail',\n    'course_list',\n    'course_detail',\n    'teacher_detail',\n    'chats_list',\n    'chats_create',\n    'chats_edit',\n    'chats_delete',",
        "detail": "acl.management.commands.init_roles",
        "documentation": {}
    },
    {
        "label": "TEACHER_PERMS",
        "kind": 5,
        "importPath": "acl.management.commands.init_roles",
        "description": "acl.management.commands.init_roles",
        "peekOfCode": "TEACHER_PERMS = [\n    'course_user_list',\n    'class_user_list',\n    'class_attendance_list',\n    'class_attendance_create',\n    'class_attendance_edit',\n    'class_attendance_delete',\n    'student_detail',\n    'class_list',\n    'class_detail',",
        "detail": "acl.management.commands.init_roles",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "acl.migrations.0001_initial",
        "description": "acl.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Permission',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "acl.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "RoleAdmin",
        "kind": 6,
        "importPath": "acl.admin",
        "description": "acl.admin",
        "peekOfCode": "class RoleAdmin(admin.ModelAdmin):\n    list_display = ['name', 'code', 'description', 'created_at', 'updated_at']\n    readonly_fields = ['created_at', 'updated_at']\n@admin.register(Permission)\nclass PermissionAdmin(admin.ModelAdmin):\n    list_display = ['name', 'code', 'description', 'created_at', 'updated_at']\n    readonly_fields = ['created_at', 'updated_at']\nadmin.site.register(UserRole)",
        "detail": "acl.admin",
        "documentation": {}
    },
    {
        "label": "PermissionAdmin",
        "kind": 6,
        "importPath": "acl.admin",
        "description": "acl.admin",
        "peekOfCode": "class PermissionAdmin(admin.ModelAdmin):\n    list_display = ['name', 'code', 'description', 'created_at', 'updated_at']\n    readonly_fields = ['created_at', 'updated_at']\nadmin.site.register(UserRole)",
        "detail": "acl.admin",
        "documentation": {}
    },
    {
        "label": "AclConfig",
        "kind": 6,
        "importPath": "acl.apps",
        "description": "acl.apps",
        "peekOfCode": "class AclConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'acl'",
        "detail": "acl.apps",
        "documentation": {}
    },
    {
        "label": "PermissionFilters",
        "kind": 6,
        "importPath": "acl.filters",
        "description": "acl.filters",
        "peekOfCode": "class PermissionFilters(filters.FilterSet):\n    search = filters.CharFilter(method=\"search_filter\")\n    limit = filters.CharFilter(method=\"limit_filter\")\n    @staticmethod\n    def search_filter(qs, name, value):\n        qs = qs.filter(\n            Q(name__icontains=value) |\n            Q(code__icontains=value) |\n            Q(description__icontains=value)\n        ).distinct()",
        "detail": "acl.filters",
        "documentation": {}
    },
    {
        "label": "RoleFilters",
        "kind": 6,
        "importPath": "acl.filters",
        "description": "acl.filters",
        "peekOfCode": "class RoleFilters(filters.FilterSet):\n    search = filters.CharFilter(method=\"search_filter\")\n    limit = filters.CharFilter(method=\"limit_filter\")\n    @staticmethod\n    def search_filter(qs, name, value):\n        qs = qs.filter(\n            Q(name__icontains=value) |\n            Q(code__icontains=value) |\n            Q(description__icontains=value)\n        ).distinct()",
        "detail": "acl.filters",
        "documentation": {}
    },
    {
        "label": "UserRoleFilters",
        "kind": 6,
        "importPath": "acl.filters",
        "description": "acl.filters",
        "peekOfCode": "class UserRoleFilters(filters.FilterSet):\n    search = filters.CharFilter(method=\"search_filter\")\n    limit = filters.CharFilter(method=\"limit_filter\")\n    @staticmethod\n    def search_filter(qs, name, value):\n        qs = qs.filter(\n            Q(user__first_name__icontains=value) |\n            Q(user__last_name__icontains=value) |\n            Q(user__phone__icontains=value) |\n            Q(role__name__icontains=value) |",
        "detail": "acl.filters",
        "documentation": {}
    },
    {
        "label": "RoleForm",
        "kind": 6,
        "importPath": "acl.forms",
        "description": "acl.forms",
        "peekOfCode": "class RoleForm(forms.ModelForm):\n    permissions = forms.CharField(required=False, label='دسترسی‌ها')\n    class Meta:\n        model = Role\n        fields = '__all__'\n    def clean_permissions(self):\n        if self.cleaned_data.get('permissions'):\n            permissions = self.cleaned_data.get('permissions').split(',')\n        else:\n            permissions = []",
        "detail": "acl.forms",
        "documentation": {}
    },
    {
        "label": "PermissionForm",
        "kind": 6,
        "importPath": "acl.forms",
        "description": "acl.forms",
        "peekOfCode": "class PermissionForm(forms.ModelForm):\n    class Meta:\n        model = Permission\n        fields = '__all__'\nclass UserRoleForm(forms.ModelForm):\n    class Meta:\n        model = UserRole\n        fields = '__all__'\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)",
        "detail": "acl.forms",
        "documentation": {}
    },
    {
        "label": "UserRoleForm",
        "kind": 6,
        "importPath": "acl.forms",
        "description": "acl.forms",
        "peekOfCode": "class UserRoleForm(forms.ModelForm):\n    class Meta:\n        model = UserRole\n        fields = '__all__'\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        if not self.instance:\n            self.fields['user'].queryset = User.objects.filter(role__isnull=True)",
        "detail": "acl.forms",
        "documentation": {}
    },
    {
        "label": "CodeType",
        "kind": 6,
        "importPath": "acl.helpers",
        "description": "acl.helpers",
        "peekOfCode": "class CodeType:\n    VERIFY = \"verify\"\n    RESET_PASSWORD = \"reset_password\"\n    CHOICES = (\n        (VERIFY, \"تایید حساب کاربری\"),\n        (RESET_PASSWORD, \"بازیابی رمز عبور\"),\n    )",
        "detail": "acl.helpers",
        "documentation": {}
    },
    {
        "label": "PermissionMixin",
        "kind": 6,
        "importPath": "acl.mixins",
        "description": "acl.mixins",
        "peekOfCode": "class PermissionMixin(object):\n    user = None\n    permissions = []\n    redirect_url = reverse_lazy('login')\n    def get_redirect_url(self):\n        # Check if redirect_url is set on request GET param\n        self.redirect_url += '?redirect_url={}'.format(self.request.path)\n        return self.redirect_url\n    def dispatch(self, *args, **kwargs):\n        self.user = self.request.user",
        "detail": "acl.mixins",
        "documentation": {}
    },
    {
        "label": "SuperUserRequiredMixin",
        "kind": 6,
        "importPath": "acl.mixins",
        "description": "acl.mixins",
        "peekOfCode": "class SuperUserRequiredMixin(LoginRequiredMixin, UserPassesTestMixin):\n    def test_func(self):\n        return self.request.user.is_superuser\nclass StaffUserRequiredMixin(LoginRequiredMixin, UserPassesTestMixin):\n    def test_func(self):\n        return self.request.user.is_staff\nclass AnonymousUserMixin:\n    def dispatch(self, request, *args, **kwargs):\n        if request.user.is_authenticated:\n            return redirect(reverse_lazy('order:order_home'))",
        "detail": "acl.mixins",
        "documentation": {}
    },
    {
        "label": "StaffUserRequiredMixin",
        "kind": 6,
        "importPath": "acl.mixins",
        "description": "acl.mixins",
        "peekOfCode": "class StaffUserRequiredMixin(LoginRequiredMixin, UserPassesTestMixin):\n    def test_func(self):\n        return self.request.user.is_staff\nclass AnonymousUserMixin:\n    def dispatch(self, request, *args, **kwargs):\n        if request.user.is_authenticated:\n            return redirect(reverse_lazy('order:order_home'))\n        else:\n            return super().dispatch(request, *args, **kwargs)\nclass VerifiedUserMixin:",
        "detail": "acl.mixins",
        "documentation": {}
    },
    {
        "label": "AnonymousUserMixin",
        "kind": 6,
        "importPath": "acl.mixins",
        "description": "acl.mixins",
        "peekOfCode": "class AnonymousUserMixin:\n    def dispatch(self, request, *args, **kwargs):\n        if request.user.is_authenticated:\n            return redirect(reverse_lazy('order:order_home'))\n        else:\n            return super().dispatch(request, *args, **kwargs)\nclass VerifiedUserMixin:\n    def dispatch(self, request, *args, **kwargs):\n        if request.user.is_authenticated and request.user.is_active:\n            return super().dispatch(request, *args, **kwargs)",
        "detail": "acl.mixins",
        "documentation": {}
    },
    {
        "label": "VerifiedUserMixin",
        "kind": 6,
        "importPath": "acl.mixins",
        "description": "acl.mixins",
        "peekOfCode": "class VerifiedUserMixin:\n    def dispatch(self, request, *args, **kwargs):\n        if request.user.is_authenticated and request.user.is_active:\n            return super().dispatch(request, *args, **kwargs)\n        else:\n            return redirect(reverse_lazy('login'))\nclass CheckPasswordResetExpirationMixin:\n    def dispatch(self, request, *args, **kwargs):\n        if request.session.has_key('reset_password_code'):\n            reset_password = OtpCode.objects.filter(code=request.session['reset_password_code']).first()",
        "detail": "acl.mixins",
        "documentation": {}
    },
    {
        "label": "CheckPasswordResetExpirationMixin",
        "kind": 6,
        "importPath": "acl.mixins",
        "description": "acl.mixins",
        "peekOfCode": "class CheckPasswordResetExpirationMixin:\n    def dispatch(self, request, *args, **kwargs):\n        if request.session.has_key('reset_password_code'):\n            reset_password = OtpCode.objects.filter(code=request.session['reset_password_code']).first()\n            if reset_password:\n                today = timezone.now()\n                expiration = reset_password.created_at + timedelta(minutes=15)\n                if today < expiration:\n                    return super().dispatch(request, *args, **kwargs)\n        try:",
        "detail": "acl.mixins",
        "documentation": {}
    },
    {
        "label": "Role",
        "kind": 6,
        "importPath": "acl.models",
        "description": "acl.models",
        "peekOfCode": "class Role(CustomModel):\n    name = models.CharField(max_length=50, verbose_name='نام نمایشی')\n    code = models.CharField(verbose_name='عنوان انگلیسی', max_length=255, unique=True)\n    description = models.TextField(max_length=500, verbose_name='توضیحات', null=True, blank=True)\n    permissions = models.ManyToManyField(to='Permission', related_name='role', verbose_name='نقش ها', blank=True)\n    class Meta:\n        verbose_name = 'نقش'\n        verbose_name_plural = 'نقش ها'\n    def __str__(self):\n        return f\"{self.name}\"",
        "detail": "acl.models",
        "documentation": {}
    },
    {
        "label": "Permission",
        "kind": 6,
        "importPath": "acl.models",
        "description": "acl.models",
        "peekOfCode": "class Permission(CustomModel):\n    name = models.CharField(max_length=50, verbose_name='نام نمایشی')\n    code = models.CharField(verbose_name='عنوان انگلیسی', max_length=255, unique=True)\n    description = models.TextField(max_length=500, verbose_name='توضیحات', null=True, blank=True)\n    class Meta:\n        verbose_name = 'دسترسی'\n        verbose_name_plural = 'دسترسی ها'\n    def __str__(self):\n        return f\"{self.name}-{self.code}\"\nclass UserRole(CustomModel):",
        "detail": "acl.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "kind": 6,
        "importPath": "acl.models",
        "description": "acl.models",
        "peekOfCode": "class UserRole(CustomModel):\n    role = models.ForeignKey(to=Role, on_delete=models.CASCADE, related_name='users', verbose_name='نقش', null=True, blank=True)\n    user = models.OneToOneField(to=User, on_delete=models.CASCADE, related_name='role', verbose_name='کاربر')\n    class Meta:\n        verbose_name = 'نقش کاربر'\n        verbose_name_plural = 'نقش کاربران'\n    def __str__(self):\n        return f\"{self.user}-{self.role.name}\"\n    @property\n    def role_name(self):",
        "detail": "acl.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "acl.models",
        "description": "acl.models",
        "peekOfCode": "User = get_user_model()\nclass Role(CustomModel):\n    name = models.CharField(max_length=50, verbose_name='نام نمایشی')\n    code = models.CharField(verbose_name='عنوان انگلیسی', max_length=255, unique=True)\n    description = models.TextField(max_length=500, verbose_name='توضیحات', null=True, blank=True)\n    permissions = models.ManyToManyField(to='Permission', related_name='role', verbose_name='نقش ها', blank=True)\n    class Meta:\n        verbose_name = 'نقش'\n        verbose_name_plural = 'نقش ها'\n    def __str__(self):",
        "detail": "acl.models",
        "documentation": {}
    },
    {
        "label": "ROLE_CODES",
        "kind": 6,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "class ROLE_CODES:\n    STUDENT = \"student\"\n    TEACHER = \"teacher\"",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "PERMISSIONS = []\nUSERS_PERMISSIONS = {\n    'title': 'دسترسی کاربران',\n    'permissions': [\n        {'name': 'لیست کاربران', 'code': 'user_list', 'description': 'دسترسی لیست کاربران'},\n        {'name': 'افزودن کاربر', 'code': 'user_create', 'description': 'دسترسی ساخت کاربر جدید'},\n        {'name': 'ویرایش کاربر', 'code': 'user_edit', 'description': 'دسترسی ویرایش کاربران'},\n        {'name': 'حذف کاربر', 'code': 'user_delete', 'description': 'دسترسی حذف کاربران'},\n        {'name': 'تغییر رمز عبور کاربر', 'code': 'user_change_password',\n         'description': 'دسترسی تغییر رمز عبور کاربران'},",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "USERS_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "USERS_PERMISSIONS = {\n    'title': 'دسترسی کاربران',\n    'permissions': [\n        {'name': 'لیست کاربران', 'code': 'user_list', 'description': 'دسترسی لیست کاربران'},\n        {'name': 'افزودن کاربر', 'code': 'user_create', 'description': 'دسترسی ساخت کاربر جدید'},\n        {'name': 'ویرایش کاربر', 'code': 'user_edit', 'description': 'دسترسی ویرایش کاربران'},\n        {'name': 'حذف کاربر', 'code': 'user_delete', 'description': 'دسترسی حذف کاربران'},\n        {'name': 'تغییر رمز عبور کاربر', 'code': 'user_change_password',\n         'description': 'دسترسی تغییر رمز عبور کاربران'},\n    ]",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "ROLES_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "ROLES_PERMISSIONS = {\n    'title': 'دسترسی نقش ها',\n    'permissions': [\n        {'name': 'لیست نقش ها', 'code': 'role_list', 'description': 'دسترسی لیست نقش ها'},\n        {'name': 'افزودن نقش', 'code': 'role_create', 'description': 'دسترسی ساخت نقش جدید'},\n        {'name': 'ویرایش نقش', 'code': 'role_edit', 'description': 'دسترسی ویرایش نقش ها'},\n        {'name': 'حذف نقش', 'code': 'role_delete', 'description': 'دسترسی حذف نقش ها'},\n    ]\n}\nPERMISSIONS.append(ROLES_PERMISSIONS)",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "CLASS_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "CLASS_PERMISSIONS = {\n    'title': 'دسترسی کلاس ها',\n    'permissions': [\n        {'name': 'لیست کلاس ها', 'code': 'class_list', 'description': 'دسترسی لیست کلاس ها'},\n        {'name': 'افزودن کلاس', 'code': 'class_create', 'description': 'دسترسی ساخت کلاس جدید'},\n        {'name': 'ویرایش کلاس', 'code': 'class_edit', 'description': 'دسترسی ویرایش کلاس ها'},\n        {'name': 'حذف کلاس', 'code': 'class_delete', 'description': 'دسترسی حذف کلاس ها'},\n        {'name': 'جزییات کلاس', 'code': 'class_detail', 'description': 'دسترسی جزییات کلاس ها'},\n        {'name': 'تغییر وضعیت کلاس', 'code': 'class_change_status', 'description': 'دسترسی تغییر وضعیت کلاس ها'},\n    ]",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "COURSE_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "COURSE_PERMISSIONS = {\n    'title': 'دسترسی دوره ها',\n    'permissions': [\n        {'name': 'لیست دوره ها', 'code': 'course_list', 'description': 'دسترسی لیست دوره ها'},\n        {'name': 'افزودن دوره', 'code': 'course_create', 'description': 'دسترسی ساخت دوره جدید'},\n        {'name': 'ویرایش دوره', 'code': 'course_edit', 'description': 'دسترسی ویرایش دوره ها'},\n        {'name': 'حذف دوره', 'code': 'course_delete', 'description': 'دسترسی حذف دوره ها'},\n        {'name': 'جزییات دوره', 'code': 'course_detail', 'description': 'دسترسی جزییات دوره ها'},\n        {'name': 'تغییر وضعیت دوره', 'code': 'course_change_status', 'description': 'دسترسی تغییر وضعیت دوره ها'},\n    ]",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "STUDENT_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "STUDENT_PERMISSIONS = {\n    'title': 'دسترسی هنرجو ها',\n    'permissions': [\n        {'name': 'لیست هنرجو ها', 'code': 'student_list', 'description': 'دسترسی لیست هنرجو ها'},\n        {'name': 'افزودن هنرجو', 'code': 'student_create', 'description': 'دسترسی ساخت هنرجو جدید'},\n        {'name': 'ویرایش هنرجو', 'code': 'student_edit', 'description': 'دسترسی ویرایش هنرجو ها'},\n        {'name': 'حذف هنرجو', 'code': 'student_delete', 'description': 'دسترسی حذف هنرجو ها'},\n        {'name': 'جزییات هنرجو', 'code': 'student_detail', 'description': 'دسترسی جزییات هنرجو ها'},\n        {'name': 'تغییر وضعیت هنرجو', 'code': 'student_change_status', 'description': 'دسترسی تغییر وضعیت هنرجو ها'},\n    ]",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "TEACHER_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "TEACHER_PERMISSIONS = {\n    'title': 'دسترسی مدرس ها',\n    'permissions': [\n        {'name': 'لیست مدرس ها', 'code': 'teacher_list', 'description': 'دسترسی لیست مدرس ها'},\n        {'name': 'افزودن مدرس', 'code': 'teacher_create', 'description': 'دسترسی ساخت مدرس جدید'},\n        {'name': 'ویرایش مدرس', 'code': 'teacher_edit', 'description': 'دسترسی ویرایش مدرس ها'},\n        {'name': 'حذف مدرس', 'code': 'teacher_delete', 'description': 'دسترسی حذف مدرس ها'},\n        {'name': 'جزییات مدرس', 'code': 'teacher_detail', 'description': 'دسترسی جزییات مدرس ها'},\n        {'name': 'تغییر وضعیت مدرس', 'code': 'teacher_change_status', 'description': 'دسترسی تغییر وضعیت مدرس ها'},\n    ]",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "COURSE_USER_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "COURSE_USER_PERMISSIONS = {\n    'title': 'دسترسی دوره کاربران',\n    'permissions': [\n        {'name': 'لیست دوره کاربران', 'code': 'course_user_list', 'description': 'دسترسی لیست دوره کاربران'},\n        {'name': 'افزودن دوره کاربران', 'code': 'course_user_create', 'description': 'دسترسی ساخت دوره کاربران جدید'},\n        {'name': 'ویرایش دوره کاربران', 'code': 'course_user_edit', 'description': 'دسترسی ویرایش دوره کاربران'},\n        {'name': 'حذف دوره کاربران', 'code': 'course_user_delete', 'description': 'دسترسی حذف دوره کاربران'},\n        {'name': 'تغییر وضعیت دوره کاربران', 'code': 'course_user_change_status',\n         'description': 'دسترسی تغییر وضعیت دوره کاربران'},\n    ]",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "CLASS_USER_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "CLASS_USER_PERMISSIONS = {\n    'title': 'دسترسی کاربران کلاس ها',\n    'permissions': [\n        {'name': 'لیست کاربران کلاس ها', 'code': 'class_user_list', 'description': 'دسترسی لیست کاربران کلاس ها'},\n        {'name': 'افزودن کاربران کلاس ها', 'code': 'class_user_create',\n         'description': 'دسترسی ساخت کاربران کلاس ها جدید'},\n        {'name': 'ویرایش کاربران کلاس ها', 'code': 'class_user_edit', 'description': 'دسترسی ویرایش کاربران کلاس ها'},\n        {'name': 'حذف کاربران کلاس ها', 'code': 'class_user_delete', 'description': 'دسترسی حذف کاربران کلاس ها'},\n        {'name': 'جزییات(پرداخت شهریه) کاربران کلاس ها', 'code': 'class_user_detail',\n         'description': 'دسترسی جزییات(پرداخت شهریه) کلاس ها'},",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "SETTINGS_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "SETTINGS_PERMISSIONS = {\n    'title': 'دسترسی تنظیمات',\n    'permissions': [\n        {'name': 'لیست تنظیمات', 'code': 'setting_list', 'description': 'دسترسی لیست تنظیمات'},\n        {'name': 'افزودن تنظیمات', 'code': 'setting_create',\n         'description': 'دسترسی ساخت تنظیمات جدید'},\n        {'name': 'ویرایش تنظیمات', 'code': 'setting_edit', 'description': 'دسترسی ویرایش تنظیمات'},\n        {'name': 'حذف تنظیمات', 'code': 'setting_delete', 'description': 'دسترسی حذف تنظیمات'},\n    ]\n}",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "SLIDERS_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "SLIDERS_PERMISSIONS = {\n    'title': 'دسترسی اسلایدر',\n    'permissions': [\n        {'name': 'لیست اسلایدر', 'code': 'slider_list', 'description': 'دسترسی لیست اسلایدر'},\n        {'name': 'افزودن اسلایدر', 'code': 'slider_create',\n         'description': 'دسترسی ساخت اسلایدر جدید'},\n        {'name': 'ویرایش اسلایدر', 'code': 'slider_edit', 'description': 'دسترسی ویرایش اسلایدر'},\n        {'name': 'حذف اسلایدر', 'code': 'slider_delete', 'description': 'دسترسی حذف اسلایدر'},\n    ]\n}",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "CLASS_ATTENDANCE_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "CLASS_ATTENDANCE_PERMISSIONS = {\n    'title': 'دسترسی حضور و غیاب',\n    'permissions': [\n        {'name': 'لیست حضور و غیاب', 'code': 'class_attendance_list', 'description': 'دسترسی لیست حضور و غیاب'},\n        {'name': 'لیست حضور و غیاب روزانه', 'code': 'class_daily_attendance_list', 'description': 'دسترسی لیست حضور و غیاب روزانه'},\n        {'name': 'افزودن حضور و غیاب', 'code': 'class_attendance_create',\n         'description': 'دسترسی ساخت حضور و غیاب جدید'},\n        {'name': 'ویرایش حضور و غیاب', 'code': 'class_attendance_edit', 'description': 'دسترسی ویرایش حضور و غیاب'},\n        {'name': 'حذف حضور و غیاب', 'code': 'class_attendance_delete', 'description': 'دسترسی حذف حضور و غیاب'},\n    ]",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "CHATS_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "CHATS_PERMISSIONS = {\n    'title': 'دسترسی پیام',\n    'permissions': [\n        {'name': 'لیست پیام', 'code': 'chats_list', 'description': 'دسترسی لیست پیام'},\n        {'name': 'افزودن پیام', 'code': 'chats_create',\n         'description': 'دسترسی ساخت پیام جدید'},\n        {'name': 'ویرایش پیام', 'code': 'chats_edit', 'description': 'دسترسی ویرایش پیام'},\n        {'name': 'حذف پیام', 'code': 'chats_delete', 'description': 'دسترسی حذف پیام'},\n    ]\n}",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "REPORT_CARD_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "REPORT_CARD_PERMISSIONS = {\n    'title': 'دسترسی کارنامه',\n    'permissions': [\n        {'name': 'لیست کارنامه', 'code': 'report_card_list', 'description': 'دسترسی لیست کارنامه'},\n        {'name': 'افزودن کارنامه', 'code': 'report_card_create',\n         'description': 'دسترسی ساخت کارنامه جدید'},\n        {'name': 'ویرایش کارنامه', 'code': 'report_card_edit', 'description': 'دسترسی ویرایش کارنامه'},\n        {'name': 'حذف کارنامه', 'code': 'report_card_delete', 'description': 'دسترسی حذف کارنامه'},\n    ]\n}",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "BLOG_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "BLOG_PERMISSIONS = {\n    'title': 'دسترسی مقاله',\n    'permissions': [\n        {'name': 'لیست مقاله', 'code': 'blog_list', 'description': 'دسترسی لیست مقاله'},\n        {'name': 'افزودن مقاله', 'code': 'blog_create',\n         'description': 'دسترسی ساخت مقاله جدید'},\n        {'name': 'ویرایش مقاله', 'code': 'blog_edit', 'description': 'دسترسی ویرایش مقاله'},\n        {'name': 'حذف مقاله', 'code': 'blog_delete', 'description': 'دسترسی حذف مقاله'},\n    ]\n}",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "BLOG_CATEGORY_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "BLOG_CATEGORY_PERMISSIONS = {\n    'title': 'دسترسی دسته بندی مقاله',\n    'permissions': [\n        {'name': 'لیست دسته بندی مقاله', 'code': 'blog_category_list', 'description': 'دسترسی لیست دسته بندی مقاله'},\n        {'name': 'افزودن دسته بندی مقاله', 'code': 'blog_category_create',\n         'description': 'دسترسی ساخت دسته بندی مقاله جدید'},\n        {'name': 'ویرایش دسته بندی مقاله', 'code': 'blog_category_edit',\n         'description': 'دسترسی ویرایش دسته بندی مقاله'},\n        {'name': 'حذف دسته بندی مقاله', 'code': 'blog_category_delete', 'description': 'دسترسی حذف دسته بندی مقاله'},\n    ]",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "CATEGORY_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "CATEGORY_PERMISSIONS = {\n    'title': 'دسترسی دسته بندی محصول',\n    'permissions': [\n        {'name': 'لیست دسته بندی محصول', 'code': 'category_list', 'description': 'دسترسی لیست دسته بندی محصول'},\n        {'name': 'افزودن دسته بندی محصول', 'code': 'category_create',\n         'description': 'دسترسی ساخت دسته بندی محصول جدید'},\n        {'name': 'ویرایش دسته بندی محصول', 'code': 'category_edit', 'description': 'دسترسی ویرایش دسته بندی محصول'},\n        {'name': 'حذف دسته بندی محصول', 'code': 'category_delete', 'description': 'دسترسی حذف دسته بندی محصول'},\n    ]\n}",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "PRODUCT_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "PRODUCT_PERMISSIONS = {\n    'title': 'دسترسی محصول',\n    'permissions': [\n        {'name': 'لیست محصول', 'code': 'product_list', 'description': 'دسترسی لیست محصول'},\n        {'name': 'افزودن محصول', 'code': 'product_create',\n         'description': 'دسترسی ساخت محصول جدید'},\n        {'name': 'ویرایش محصول', 'code': 'product_edit', 'description': 'دسترسی ویرایش محصول'},\n        {'name': 'حذف محصول', 'code': 'product_delete', 'description': 'دسترسی حذف محصول'},\n    ]\n}",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "USER_PRODUCT_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "USER_PRODUCT_PERMISSIONS = {\n    'title': 'دسترسی محصولات کاربران',\n    'permissions': [\n        {'name': 'لیست محصولات کاربران', 'code': 'user_product_list', 'description': 'دسترسی لیست محصولات کاربران'},\n        {'name': 'حذف محصولات کاربران', 'code': 'user_product_delete', 'description': 'دسترسی حذف محصولات کاربران'},\n    ]\n}\nPERMISSIONS.append(USER_PRODUCT_PERMISSIONS)\n######################################################################\nTICKET_PERMISSIONS = {",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "TICKET_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "TICKET_PERMISSIONS = {\n    'title': 'دسترسی تیکت',\n    'permissions': [\n        {'name': 'لیست تیکت', 'code': 'ticket_list', 'description': 'دسترسی لیست تیکت'},\n        {'name': 'افزودن تیکت', 'code': 'ticket_create',\n         'description': 'دسترسی ساخت تیکت جدید'},\n        {'name': 'ویرایش تیکت', 'code': 'ticket_edit', 'description': 'دسترسی ویرایش تیکت'},\n        {'name': 'حذف تیکت', 'code': 'ticket_delete', 'description': 'دسترسی حذف تیکت'},\n    ]\n}",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "TICKET_ANSWER_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "TICKET_ANSWER_PERMISSIONS = {\n    'title': 'دسترسی پاسخ تیکت ها',\n    'permissions': [\n        {'name': 'لیست پاسخ تیکت ها', 'code': 'ticket_answer_list', 'description': 'دسترسی لیست پاسخ تیکت ها'},\n        {'name': 'افزودن پاسخ تیکت ها', 'code': 'ticket_answer_create',\n         'description': 'دسترسی ساخت پاسخ تیکت ها جدید'},\n        {'name': 'ویرایش پاسخ تیکت ها', 'code': 'ticket_answer_edit', 'description': 'دسترسی ویرایش پاسخ تیکت ها'},\n        {'name': 'حذف پاسخ تیکت ها', 'code': 'ticket_answer_delete', 'description': 'دسترسی حذف پاسخ تیکت ها'},\n    ]\n}",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "HELPS_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "HELPS_PERMISSIONS = {\n    'title': 'دسترسی متون راهنما',\n    'permissions': [\n        {'name': 'لیست متون راهنما', 'code': 'helps_answer_list', 'description': 'دسترسی لیست متون راهنما'},\n        {'name': 'افزودن متون راهنما', 'code': 'helps_answer_create',\n         'description': 'دسترسی ساخت متون راهنما جدید'},\n        {'name': 'ویرایش متون راهنما', 'code': 'helps_answer_edit', 'description': 'دسترسی ویرایش متون راهنما'},\n        {'name': 'حذف متون راهنما', 'code': 'helps_answer_delete', 'description': 'دسترسی حذف متون راهنما'},\n    ]\n}",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "SUGGESTION_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "SUGGESTION_PERMISSIONS = {\n    'title': 'دسترسی انتقادات و پیشنهادات ها',\n    'permissions': [\n        {'name': 'لیست انتقادات و پیشنهادات ها', 'code': 'suggestion_list',\n         'description': 'دسترسی لیست انتقادات و پیشنهادات ها'},\n        {'name': 'افزودن انتقادات و پیشنهادات ها', 'code': 'suggestion_create',\n         'description': 'دسترسی ساخت انتقادات و پیشنهادات ها جدید'},\n        {'name': 'ویرایش انتقادات و پیشنهادات ها', 'code': 'suggestion_edit',\n         'description': 'دسترسی ویرایش انتقادات و پیشنهادات ها'},\n        {'name': 'حذف انتقادات و پیشنهادات ها', 'code': 'suggestion_delete',",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "CONTACT_US_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "CONTACT_US_PERMISSIONS = {\n    'title': 'دسترسی ارتباط باما',\n    'permissions': [\n        {'name': 'لیست ارتباط باما', 'code': 'contact_us_list', 'description': 'دسترسی لیست ارتباط باما'},\n        {'name': 'افزودن ارتباط باما', 'code': 'contact_us_create',\n         'description': 'دسترسی ساخت ارتباط باما جدید'},\n        {'name': 'ویرایش ارتباط باما', 'code': 'contact_us_edit', 'description': 'دسترسی ویرایش ارتباط باما'},\n        {'name': 'حذف ارتباط باما', 'code': 'contact_us_delete', 'description': 'دسترسی حذف ارتباط باما'},\n    ]\n}",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "PRODUCT_USER_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "PRODUCT_USER_PERMISSIONS = {\n    'title': 'دسترسی نمایش محصولات به کاربران ها',\n    'permissions': [\n        {'name': 'لیست نمایش محصولات به کاربران ها', 'code': 'product_user_list',\n         'description': 'دسترسی لیست نمایش محصولات به کاربران ها'},\n        {'name': 'جزییات نمایش محصولات به کاربران ها', 'code': 'product_user_detail',\n         'description': 'دسترسی جزییات نمایش محصولات به کاربران ها جدید'},\n    ]\n}\nPERMISSIONS.append(PRODUCT_USER_PERMISSIONS)",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "QUIZ_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "QUIZ_PERMISSIONS = {\n    'title': 'دسترسی آزمون ها',\n    'permissions': [\n        {'name': 'لیست آزمون ها', 'code': 'quiz_list', 'description': 'دسترسی لیست آزمون ها'},\n        {'name': 'افزودن آزمون ها', 'code': 'quiz_create',\n         'description': 'دسترسی ساخت آزمون ها جدید'},\n        {'name': 'ویرایش آزمون ها', 'code': 'quiz_edit', 'description': 'دسترسی ویرایش آزمون ها'},\n        {'name': 'حذف آزمون ها', 'code': 'quiz_delete', 'description': 'دسترسی حذف آزمون ها'},\n        {'name': 'جزییات آزمون ها', 'code': 'quiz_detail', 'description': 'دسترسی جزییات آزمون ها'},\n        {'name': 'تغییر وضعیت آزمون ها', 'code': 'quiz_change_status',",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "USER_QUIZ_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "USER_QUIZ_PERMISSIONS = {\n    'title': 'دسترسی پاسخنامه ها',\n    'permissions': [\n        {'name': 'لیست پاسخنامه ها', 'code': 'user_quiz_list', 'description': 'دسترسی لیست پاسخنامه ها'},\n        {'name': 'افزودن پاسخنامه ها', 'code': 'user_quiz_create',\n         'description': 'دسترسی ساخت پاسخنامه ها جدید'},\n        {'name': 'ویرایش پاسخنامه ها', 'code': 'user_quiz_edit', 'description': 'دسترسی ویرایش پاسخنامه ها'},\n        {'name': 'حذف پاسخنامه ها', 'code': 'user_quiz_delete', 'description': 'دسترسی حذف پاسخنامه ها'},\n        {'name': 'جزییات پاسخنامه ها', 'code': 'user_quiz_detail', 'description': 'دسترسی جزییات پاسخنامه ها'},\n        {'name': 'ثبت نمره پاسخنامه ها', 'code': 'user_quiz_score', 'description': 'دسترسی ثبت نمره پاسخنامه ها'},",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "INSTALLMENT_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "INSTALLMENT_PERMISSIONS = {\n    'title': 'دسترسی قسط شهریه ها',\n    'permissions': [\n        {'name': 'لیست قسط شهریه ها', 'code': 'installment_list', 'description': 'دسترسی لیست قسط شهریه ها'},\n        {'name': 'افزودن قسط شهریه ها', 'code': 'installment_create',\n         'description': 'دسترسی ساخت قسط شهریه ها جدید'},\n        {'name': 'ویرایش قسط شهریه ها', 'code': 'installment_edit', 'description': 'دسترسی ویرایش قسط شهریه ها'},\n        {'name': 'حذف قسط شهریه ها', 'code': 'installment_delete', 'description': 'دسترسی حذف قسط شهریه ها'},\n        {'name': 'جزییات قسط شهریه ها', 'code': 'installment_detail', 'description': 'دسترسی جزییات قسط شهریه ها'},\n    ]",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "INSTALLMENT_PAYMENTS_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "INSTALLMENT_PAYMENTS_PERMISSIONS = {\n    'title': 'دسترسی تقسیم های قسط شهریه ها',\n    'permissions': [\n        {'name': 'لیست تقسیم های قسط شهریه ها', 'code': 'installment_items_list',\n         'description': 'دسترسی لیست تقسیم های قسط شهریه ها'},\n        {'name': 'افزودن تقسیم های قسط شهریه ها', 'code': 'installment_items_create',\n         'description': 'دسترسی ساخت تقسیم های قسط شهریه ها جدید'},\n        {'name': 'ویرایش تقسیم های قسط شهریه ها', 'code': 'installment_items_edit',\n         'description': 'دسترسی ویرایش تقسیم های قسط شهریه ها'},\n        {'name': 'حذف تقسیم های قسط شهریه ها', 'code': 'installment_items_delete',",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "SMS_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "SMS_PERMISSIONS = {\n    'title': 'دسترسی پیامک ها',\n    'permissions': [\n        {'name': 'لیست پیامک ها', 'code': 'sms_list', 'description': 'دسترسی لیست تراکنش ها'},\n        {'name': 'ارسال پیامک ها', 'code': 'sms_send', 'description': 'دسترسی ارسال تراکنش ها'},\n    ]\n}\nPERMISSIONS.append(SMS_PERMISSIONS)\n######################################################################\nPAYMENTS_PERMISSIONS = {",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "PAYMENTS_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "PAYMENTS_PERMISSIONS = {\n    'title': 'دسترسی تراکنش ها',\n    'permissions': [\n        {'name': 'لیست تراکنش ها', 'code': 'payments_list', 'description': 'دسترسی لیست تراکنش ها'},\n    ]\n}\nPERMISSIONS.append(PAYMENTS_PERMISSIONS)\n######################################################################\nBLO_COMMENTS_PERMISSIONS = {\n    'title': 'دسترسی نظرات',",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "BLO_COMMENTS_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "BLO_COMMENTS_PERMISSIONS = {\n    'title': 'دسترسی نظرات',\n    'permissions': [\n        {'name': 'لیست نظرات', 'code': 'blog_comments_list', 'description': 'دسترسی لیست نظرات'},\n        {'name': 'تغییر وضعیت نظرات', 'code': 'blog_comments_change_status', 'description': 'دسترسی تغییر وضعیت نظرات'},\n        {'name': 'حذف نظرات', 'code': 'blog_comments_delete', 'description': 'دسترسی حذف نظرات'},\n    ]\n}\nPERMISSIONS.append(BLO_COMMENTS_PERMISSIONS)\n######################################################################",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "POLL_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "POLL_PERMISSIONS = {\n    'title': 'دسترسی فرم نظرسنجی ها',\n    'permissions': [\n        {'name': 'لیست فرم نظرسنجی ها', 'code': 'poll_list', 'description': 'دسترسی لیست فرم نظرسنجی ها'},\n        {'name': 'افزودن فرم نظرسنجی', 'code': 'poll_create', 'description': 'دسترسی ساخت فرم نظرسنجی جدید'},\n        {'name': 'ویرایش فرم نظرسنجی', 'code': 'poll_edit', 'description': 'دسترسی ویرایش فرم نظرسنجی ها'},\n        {'name': 'حذف فرم نظرسنجی', 'code': 'poll_delete', 'description': 'دسترسی حذف فرم نظرسنجی ها'},\n        {'name': 'جزییات فرم نظرسنجی', 'code': 'poll_detail', 'description': 'دسترسی جزییات فرم نظرسنجی ها'},\n        {'name': 'تغییر وضعیت فرم نظرسنجی', 'code': 'poll_change_status',\n         'description': 'دسترسی تغییر وضعیت فرم نظرسنجی ها'},",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "CLASS_CATEGORY_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "CLASS_CATEGORY_PERMISSIONS = {\n    'title': 'دسترسی دسته بندی کلاس ها',\n    'permissions': [\n        {'name': 'لیست دسته بندی کلاس ها', 'code': 'classes_categories_list', 'description': 'دسترسی لیست دسته بندی کلاس ها'},\n        {'name': 'افزودن دسته بندی کلاس', 'code': 'classes_categories_create', 'description': 'دسترسی ساخت دسته بندی کلاس جدید'},\n        {'name': 'ویرایش دسته بندی کلاس', 'code': 'classes_categories_edit', 'description': 'دسترسی ویرایش دسته بندی کلاس ها'},\n        {'name': 'حذف دسته بندی کلاس', 'code': 'classes_categories_delete', 'description': 'دسترسی حذف دسته بندی کلاس ها'}\n    ]\n}\nPERMISSIONS.append(CLASS_CATEGORY_PERMISSIONS)",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "TEACHER_ATTENDANCE_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "TEACHER_ATTENDANCE_PERMISSIONS = {\n    'title': 'دسترسی حضور و غیاب مدرس ها',\n    'permissions': [\n        {'name': 'لیست حضور و غیاب مدرس ها', 'code': 'teacher_attendance_list',\n         'description': 'دسترسی لیست حضور و غیاب مدرس ها'},\n        {'name': 'افزودن حضور و غیاب مدرس', 'code': 'teacher_attendance_create',\n         'description': 'دسترسی ساخت حضور و غیاب مدرس جدید'},\n        {'name': 'ویرایش حضور و غیاب مدرس', 'code': 'teacher_attendance_edit',\n         'description': 'دسترسی ویرایش حضور و غیاب مدرس ها'},\n        {'name': 'حذف حضور و غیاب مدرس', 'code': 'teacher_attendance_delete',",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "TEACHER_PAYMENTS_PERMISSIONS",
        "kind": 5,
        "importPath": "acl.permissions",
        "description": "acl.permissions",
        "peekOfCode": "TEACHER_PAYMENTS_PERMISSIONS = {\n    'title': 'دسترسی پرداختی مدرس ها',\n    'permissions': [\n        {'name': 'لیست پرداختی مدرس ها', 'code': 'teacher_payments_list', 'description': 'دسترسی لیست پرداختی مدرس ها'},\n        {'name': 'افزودن پرداختی مدرس', 'code': 'teacher_payments_create',\n         'description': 'دسترسی ساخت پرداختی مدرس جدید'},\n        {'name': 'ویرایش پرداختی مدرس', 'code': 'teacher_payments_edit',\n         'description': 'دسترسی ویرایش پرداختی مدرس ها'},\n        {'name': 'حذف پرداختی مدرس', 'code': 'teacher_payments_delete', 'description': 'دسترسی حذف پرداختی مدرس ها'},\n        {'name': 'جزییات پرداختی مدرس', 'code': 'teacher_payments_detail',",
        "detail": "acl.permissions",
        "documentation": {}
    },
    {
        "label": "RestPermissionMixin",
        "kind": 6,
        "importPath": "acl.rest_mixin",
        "description": "acl.rest_mixin",
        "peekOfCode": "class RestPermissionMixin(permissions.BasePermission):\n    def has_permission(self, request, view):\n        if not request.user.is_authenticated:\n            return False\n        if request.user.is_superuser:\n            return True\n        if not hasattr(view, 'permissions'):\n            return True\n        for permission in view.permissions:\n            if any(permission in p for p in request.user.permissions):",
        "detail": "acl.rest_mixin",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "acl.urls",
        "description": "acl.urls",
        "peekOfCode": "urlpatterns = []\ndashboard_urls = [\n    path('dashboard/roles/', RolesListView.as_view(), name='roles-list'),\n    path('dashboard/roles/create/', RolesCreateView.as_view(), name='roles-create'),\n    path('dashboard/roles/update/<int:pk>/', RolesUpdateView.as_view(), name='roles-update'),\n    path('dashboard/roles/delete/<int:pk>/', RolesDeleteView.as_view(), name='roles-delete'),\n    path('dashboard/permissions/', PermissionsListView.as_view(), name='permissions-list'),\n    path('dashboard/permissions/create/', PermissionsCreateView.as_view(), name='permissions-create'),\n    path('dashboard/permissions/update/<int:pk>/', PermissionsUpdateView.as_view(), name='permissions-update'),\n    path('dashboard/permissions/delete/<int:pk>/', PermissionsDeleteView.as_view(), name='permissions-delete'),",
        "detail": "acl.urls",
        "documentation": {}
    },
    {
        "label": "dashboard_urls",
        "kind": 5,
        "importPath": "acl.urls",
        "description": "acl.urls",
        "peekOfCode": "dashboard_urls = [\n    path('dashboard/roles/', RolesListView.as_view(), name='roles-list'),\n    path('dashboard/roles/create/', RolesCreateView.as_view(), name='roles-create'),\n    path('dashboard/roles/update/<int:pk>/', RolesUpdateView.as_view(), name='roles-update'),\n    path('dashboard/roles/delete/<int:pk>/', RolesDeleteView.as_view(), name='roles-delete'),\n    path('dashboard/permissions/', PermissionsListView.as_view(), name='permissions-list'),\n    path('dashboard/permissions/create/', PermissionsCreateView.as_view(), name='permissions-create'),\n    path('dashboard/permissions/update/<int:pk>/', PermissionsUpdateView.as_view(), name='permissions-update'),\n    path('dashboard/permissions/delete/<int:pk>/', PermissionsDeleteView.as_view(), name='permissions-delete'),\n    path('dashboard/role/user/', RoleUserListView.as_view(), name='role-user-list'),",
        "detail": "acl.urls",
        "documentation": {}
    },
    {
        "label": "RolesListView",
        "kind": 6,
        "importPath": "acl.views",
        "description": "acl.views",
        "peekOfCode": "class RolesListView(SuperUserRequiredMixin, ListView):\n    model = Role\n    context_object_name = 'roles'\n    paginate_by = settings.PAGINATION_NUMBER\n    ordering = ['-updated_at']\n    template_name = 'acl/admin/roles/list.html'\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        return RoleFilters(data=self.request.GET, queryset=queryset).qs\nclass RolesCreateView(SuperUserRequiredMixin, CreateView):",
        "detail": "acl.views",
        "documentation": {}
    },
    {
        "label": "RolesCreateView",
        "kind": 6,
        "importPath": "acl.views",
        "description": "acl.views",
        "peekOfCode": "class RolesCreateView(SuperUserRequiredMixin, CreateView):\n    model = Role\n    template_name = 'acl/admin/roles/form.html'\n    form_class = RoleForm\n    success_url = reverse_lazy('roles-list')\n    def get_context_data(self, *, object_list=None, **kwargs):\n        context = super().get_context_data()\n        context['permissions'] = PERMISSIONS\n        return context\nclass RolesUpdateView(SuperUserRequiredMixin, UpdateView):",
        "detail": "acl.views",
        "documentation": {}
    },
    {
        "label": "RolesUpdateView",
        "kind": 6,
        "importPath": "acl.views",
        "description": "acl.views",
        "peekOfCode": "class RolesUpdateView(SuperUserRequiredMixin, UpdateView):\n    model = Role\n    form_class = RoleForm\n    template_name = 'acl/admin/roles/form.html'\n    success_url = reverse_lazy('roles-list')\n    def get_context_data(self, *, object_list=None, **kwargs):\n        context = super().get_context_data()\n        context['permissions'] = PERMISSIONS\n        return context\nclass RolesDeleteView(SuperUserRequiredMixin, DeleteView):",
        "detail": "acl.views",
        "documentation": {}
    },
    {
        "label": "RolesDeleteView",
        "kind": 6,
        "importPath": "acl.views",
        "description": "acl.views",
        "peekOfCode": "class RolesDeleteView(SuperUserRequiredMixin, DeleteView):\n    model = Role\n    template_name = 'acl/admin/roles/list.html'\n    success_url = reverse_lazy('roles-list')\n    def dispatch(self, *args, **kwargs):\n        resp = super().dispatch(*args, **kwargs)\n        messages.success(self.request, 'نقش مورد نظر با موفقیت حدف شد.')\n        return resp\n###################################################################\nclass PermissionsListView(SuperUserRequiredMixin, ListView):",
        "detail": "acl.views",
        "documentation": {}
    },
    {
        "label": "PermissionsListView",
        "kind": 6,
        "importPath": "acl.views",
        "description": "acl.views",
        "peekOfCode": "class PermissionsListView(SuperUserRequiredMixin, ListView):\n    model = Permission\n    context_object_name = 'permissions'\n    paginate_by = settings.PAGINATION_NUMBER\n    ordering = ['-updated_at']\n    template_name = 'acl/admin/permissions/list.html'\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        return PermissionFilters(data=self.request.GET, queryset=queryset).qs\nclass PermissionsCreateView(SuperUserRequiredMixin, CreateView):",
        "detail": "acl.views",
        "documentation": {}
    },
    {
        "label": "PermissionsCreateView",
        "kind": 6,
        "importPath": "acl.views",
        "description": "acl.views",
        "peekOfCode": "class PermissionsCreateView(SuperUserRequiredMixin, CreateView):\n    template_name = \"acl/admin/permissions/form.html\"\n    model = Permission\n    form_class = PermissionForm\n    success_url = reverse_lazy(\"permissions-list\")\nclass PermissionsUpdateView(SuperUserRequiredMixin, UpdateView):\n    template_name = \"acl/admin/permissions/form.html\"\n    model = Permission\n    form_class = PermissionForm\n    success_url = reverse_lazy(\"permissions-list\")",
        "detail": "acl.views",
        "documentation": {}
    },
    {
        "label": "PermissionsUpdateView",
        "kind": 6,
        "importPath": "acl.views",
        "description": "acl.views",
        "peekOfCode": "class PermissionsUpdateView(SuperUserRequiredMixin, UpdateView):\n    template_name = \"acl/admin/permissions/form.html\"\n    model = Permission\n    form_class = PermissionForm\n    success_url = reverse_lazy(\"permissions-list\")\nclass PermissionsDeleteView(SuperUserRequiredMixin, DeleteView):\n    model = Permission\n    template_name = 'acl/admin/permissions/list.html'\n    success_url = reverse_lazy(\"permissions-list\")\n    def dispatch(self, *args, **kwargs):",
        "detail": "acl.views",
        "documentation": {}
    },
    {
        "label": "PermissionsDeleteView",
        "kind": 6,
        "importPath": "acl.views",
        "description": "acl.views",
        "peekOfCode": "class PermissionsDeleteView(SuperUserRequiredMixin, DeleteView):\n    model = Permission\n    template_name = 'acl/admin/permissions/list.html'\n    success_url = reverse_lazy(\"permissions-list\")\n    def dispatch(self, *args, **kwargs):\n        resp = super().dispatch(*args, **kwargs)\n        messages.success(self.request, 'دسترسی مورد نظر با موفقیت حدف شد.')\n        return resp\n############################################################################\nclass RoleUserListView(SuperUserRequiredMixin, ListView):",
        "detail": "acl.views",
        "documentation": {}
    },
    {
        "label": "RoleUserListView",
        "kind": 6,
        "importPath": "acl.views",
        "description": "acl.views",
        "peekOfCode": "class RoleUserListView(SuperUserRequiredMixin, ListView):\n    model = UserRole\n    context_object_name = 'user_roles'\n    paginate_by = settings.PAGINATION_NUMBER\n    ordering = ['-updated_at']\n    template_name = 'acl/admin/user_roles/list.html'\n    queryset = UserRole.objects.filter(role__isnull=False)\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        return UserRoleFilters(data=self.request.GET, queryset=queryset).qs",
        "detail": "acl.views",
        "documentation": {}
    },
    {
        "label": "RoleUserCreateView",
        "kind": 6,
        "importPath": "acl.views",
        "description": "acl.views",
        "peekOfCode": "class RoleUserCreateView(SuperUserRequiredMixin, CreateView):\n    template_name = \"acl/admin/user_roles/form.html\"\n    model = UserRole\n    form_class = UserRoleForm\n    success_url = reverse_lazy('role-user-list')\n    def get(self, request, *args, **kwargs):\n        if self.request.GET.get('user'):\n            try:\n                User.objects.get(pk=self.request.GET.get('user'))\n            except:",
        "detail": "acl.views",
        "documentation": {}
    },
    {
        "label": "RoleUserUpdateView",
        "kind": 6,
        "importPath": "acl.views",
        "description": "acl.views",
        "peekOfCode": "class RoleUserUpdateView(SuperUserRequiredMixin, UpdateView):\n    model = UserRole\n    form_class = UserRoleForm\n    template_name = \"acl/admin/user_roles/form.html\"\n    success_url = reverse_lazy('role-user-list')\n    def get(self, request, *args, **kwargs):\n        if self.request.GET.get('user'):\n            try:\n                User.objects.get(pk=self.request.GET.get('user'))\n            except:",
        "detail": "acl.views",
        "documentation": {}
    },
    {
        "label": "RoleUserDeleteView",
        "kind": 6,
        "importPath": "acl.views",
        "description": "acl.views",
        "peekOfCode": "class RoleUserDeleteView(SuperUserRequiredMixin, DeleteView):\n    model = UserRole\n    template_name = 'acl/admin/user_roles/list.html'\n    success_url = reverse_lazy('role-user-list')\n    def dispatch(self, *args, **kwargs):\n        resp = super().dispatch(*args, **kwargs)\n        messages.success(self.request, 'کاربر مدیر مورد نظر با موفقیت حدف شد.')\n        return resp",
        "detail": "acl.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "acl.views",
        "description": "acl.views",
        "peekOfCode": "User = get_user_model()\nclass RolesListView(SuperUserRequiredMixin, ListView):\n    model = Role\n    context_object_name = 'roles'\n    paginate_by = settings.PAGINATION_NUMBER\n    ordering = ['-updated_at']\n    template_name = 'acl/admin/roles/list.html'\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        return RoleFilters(data=self.request.GET, queryset=queryset).qs",
        "detail": "acl.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "config.asgi",
        "description": "config.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "config.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = config('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = config('DEBUG', default=True, cast=bool)\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "SECRET_KEY = config('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = config('DEBUG', default=True, cast=bool)\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DEBUG = config('DEBUG', default=True, cast=bool)\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'crispy_forms',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'crispy_forms',\n    'crispy_bootstrap5',\n    'django_google_maps',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'config.urls'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ROOT_URLCONF = 'config.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "WSGI_APPLICATION = 'config.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# ! ======================= Mysql =======================#",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# ! ======================= Mysql =======================#\n# DATABASES = {\n#     'default': {\n#         'ENGINE': 'django.db.backends.mysql',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "LANGUAGE_CODE = 'fa-ir'\nTIME_ZONE = 'Asia/Tehran'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\n# STATIC_URL = '/static/'\nSTATIC_URL = '/site_statics/'\nSTATICFILES_DIRS = [",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "TIME_ZONE = 'Asia/Tehran'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\n# STATIC_URL = '/static/'\nSTATIC_URL = '/site_statics/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"assets\")",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\n# STATIC_URL = '/static/'\nSTATIC_URL = '/site_statics/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"assets\")\n]",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\n# STATIC_URL = '/static/'\nSTATIC_URL = '/site_statics/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"assets\")\n]\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static_cdn\", \"static_root\")",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\n# STATIC_URL = '/static/'\nSTATIC_URL = '/site_statics/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"assets\")\n]\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static_cdn\", \"static_root\")\nMEDIA_URL = '/media/'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "STATIC_URL = '/site_statics/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"assets\")\n]\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static_cdn\", \"static_root\")\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, \"static_cdn\", \"media_root\")\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\n# CRISPY",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"assets\")\n]\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static_cdn\", \"static_root\")\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, \"static_cdn\", \"media_root\")\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\n# CRISPY\nCRISPY_ALLOWED_TEMPLATE_PACKS = \"bootstrap5\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, \"static_cdn\", \"static_root\")\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, \"static_cdn\", \"media_root\")\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\n# CRISPY\nCRISPY_ALLOWED_TEMPLATE_PACKS = \"bootstrap5\"\nCRISPY_TEMPLATE_PACK = \"bootstrap5\"\n# Google Map\n# GOOGLE_MAPS_API_KEY = ",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, \"static_cdn\", \"media_root\")\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\n# CRISPY\nCRISPY_ALLOWED_TEMPLATE_PACKS = \"bootstrap5\"\nCRISPY_TEMPLATE_PACK = \"bootstrap5\"\n# Google Map\n# GOOGLE_MAPS_API_KEY = \nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, \"static_cdn\", \"media_root\")\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\n# CRISPY\nCRISPY_ALLOWED_TEMPLATE_PACKS = \"bootstrap5\"\nCRISPY_TEMPLATE_PACK = \"bootstrap5\"\n# Google Map\n# GOOGLE_MAPS_API_KEY = \nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_URL = config('LOGIN_URL')",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_ALLOWED_TEMPLATE_PACKS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "CRISPY_ALLOWED_TEMPLATE_PACKS = \"bootstrap5\"\nCRISPY_TEMPLATE_PACK = \"bootstrap5\"\n# Google Map\n# GOOGLE_MAPS_API_KEY = \nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_URL = config('LOGIN_URL')\nLOGIN_REDIRECT_URL = config('LOGIN_URL')\nAUTH_USER_MODEL = 'accounts.User'\n# SMS\nSMS_USERNAME = config('SMS_USERNAME')",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_TEMPLATE_PACK",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "CRISPY_TEMPLATE_PACK = \"bootstrap5\"\n# Google Map\n# GOOGLE_MAPS_API_KEY = \nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_URL = config('LOGIN_URL')\nLOGIN_REDIRECT_URL = config('LOGIN_URL')\nAUTH_USER_MODEL = 'accounts.User'\n# SMS\nSMS_USERNAME = config('SMS_USERNAME')\nSMS_PASSWORD = config('SMS_PASSWORD')",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_URL = config('LOGIN_URL')\nLOGIN_REDIRECT_URL = config('LOGIN_URL')\nAUTH_USER_MODEL = 'accounts.User'\n# SMS\nSMS_USERNAME = config('SMS_USERNAME')\nSMS_PASSWORD = config('SMS_PASSWORD')\nSMS_FROM_NUMBER = config('SMS_FROM_NUMBER')\nSMS_WEB_SERVICE_URL = config('SMS_WEB_SERVICE_URL')\nSMS_WEB_SERVICE_TOKEN = config('SMS_WEB_SERVICE_TOKEN')",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "LOGIN_URL = config('LOGIN_URL')\nLOGIN_REDIRECT_URL = config('LOGIN_URL')\nAUTH_USER_MODEL = 'accounts.User'\n# SMS\nSMS_USERNAME = config('SMS_USERNAME')\nSMS_PASSWORD = config('SMS_PASSWORD')\nSMS_FROM_NUMBER = config('SMS_FROM_NUMBER')\nSMS_WEB_SERVICE_URL = config('SMS_WEB_SERVICE_URL')\nSMS_WEB_SERVICE_TOKEN = config('SMS_WEB_SERVICE_TOKEN')",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = config('LOGIN_URL')\nAUTH_USER_MODEL = 'accounts.User'\n# SMS\nSMS_USERNAME = config('SMS_USERNAME')\nSMS_PASSWORD = config('SMS_PASSWORD')\nSMS_FROM_NUMBER = config('SMS_FROM_NUMBER')\nSMS_WEB_SERVICE_URL = config('SMS_WEB_SERVICE_URL')\nSMS_WEB_SERVICE_TOKEN = config('SMS_WEB_SERVICE_TOKEN')",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'accounts.User'\n# SMS\nSMS_USERNAME = config('SMS_USERNAME')\nSMS_PASSWORD = config('SMS_PASSWORD')\nSMS_FROM_NUMBER = config('SMS_FROM_NUMBER')\nSMS_WEB_SERVICE_URL = config('SMS_WEB_SERVICE_URL')\nSMS_WEB_SERVICE_TOKEN = config('SMS_WEB_SERVICE_TOKEN')",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "SMS_USERNAME",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "SMS_USERNAME = config('SMS_USERNAME')\nSMS_PASSWORD = config('SMS_PASSWORD')\nSMS_FROM_NUMBER = config('SMS_FROM_NUMBER')\nSMS_WEB_SERVICE_URL = config('SMS_WEB_SERVICE_URL')\nSMS_WEB_SERVICE_TOKEN = config('SMS_WEB_SERVICE_TOKEN')",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "SMS_PASSWORD",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "SMS_PASSWORD = config('SMS_PASSWORD')\nSMS_FROM_NUMBER = config('SMS_FROM_NUMBER')\nSMS_WEB_SERVICE_URL = config('SMS_WEB_SERVICE_URL')\nSMS_WEB_SERVICE_TOKEN = config('SMS_WEB_SERVICE_TOKEN')",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "SMS_FROM_NUMBER",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "SMS_FROM_NUMBER = config('SMS_FROM_NUMBER')\nSMS_WEB_SERVICE_URL = config('SMS_WEB_SERVICE_URL')\nSMS_WEB_SERVICE_TOKEN = config('SMS_WEB_SERVICE_TOKEN')",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "SMS_WEB_SERVICE_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "SMS_WEB_SERVICE_URL = config('SMS_WEB_SERVICE_URL')\nSMS_WEB_SERVICE_TOKEN = config('SMS_WEB_SERVICE_TOKEN')",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "SMS_WEB_SERVICE_TOKEN",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "SMS_WEB_SERVICE_TOKEN = config('SMS_WEB_SERVICE_TOKEN')",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "config.urls",
        "description": "config.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('accounts/', include('accounts.urls')),\n    path('', include('content.urls', namespace='content')),\n    path('top/projects/', include('top_projects.urls', namespace='top_projects')),\n    path('', include('order.urls', namespace='order')),\n    path('about_us/', include('about_us.urls')),\n    path('faq/', include('faq.urls')),\n    path('contact_us/', include('contact_us.urls', namespace='contact_us')),\n]",
        "detail": "config.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "config.wsgi",
        "description": "config.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "config.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "contact_us.migrations.0001_initial",
        "description": "contact_us.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ContactUs',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('full_name', models.CharField(max_length=255, verbose_name='نام و نام خانوادگی')),",
        "detail": "contact_us.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "contact_us.migrations.0002_alter_contactus_phone_number",
        "description": "contact_us.migrations.0002_alter_contactus_phone_number",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('contact_us', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='contactus',\n            name='phone_number',\n            field=models.CharField(max_length=11, unique=True, verbose_name='شماره موبایل'),\n        ),",
        "detail": "contact_us.migrations.0002_alter_contactus_phone_number",
        "documentation": {}
    },
    {
        "label": "ContactUsConfig",
        "kind": 6,
        "importPath": "contact_us.apps",
        "description": "contact_us.apps",
        "peekOfCode": "class ContactUsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'contact_us'",
        "detail": "contact_us.apps",
        "documentation": {}
    },
    {
        "label": "ContactUsFilters",
        "kind": 6,
        "importPath": "contact_us.filters",
        "description": "contact_us.filters",
        "peekOfCode": "class ContactUsFilters(filters.FilterSet):\n    search = filters.CharFilter(method=\"search_filter\")\n    status = filters.CharFilter(method=\"status_filter\")\n    limit = filters.CharFilter(method=\"limit_filter\")\n    @staticmethod\n    def search_filter(qs, name, value):\n        qs = qs.filter(\n            Q(title__icontains=value) |\n            Q(slug__icontains=value) |\n            Q(body__icontains=value)",
        "detail": "contact_us.filters",
        "documentation": {}
    },
    {
        "label": "ContactUsForm",
        "kind": 6,
        "importPath": "contact_us.forms",
        "description": "contact_us.forms",
        "peekOfCode": "class ContactUsForm(forms.ModelForm):\n    class Meta:\n        model = ContactUs\n        exclude = ['created']\n        widgets = {\n            'body': forms.Textarea(attrs={'class': 'form-control'}),\n        }",
        "detail": "contact_us.forms",
        "documentation": {}
    },
    {
        "label": "status_CHOICES",
        "kind": 5,
        "importPath": "contact_us.helpers",
        "description": "contact_us.helpers",
        "peekOfCode": "status_CHOICES = (\n    ('A', 'پیگیری شده'),\n    ('B', 'پیگیره نشده'),\n)",
        "detail": "contact_us.helpers",
        "documentation": {}
    },
    {
        "label": "ContactUs",
        "kind": 6,
        "importPath": "contact_us.models",
        "description": "contact_us.models",
        "peekOfCode": "class ContactUs(models.Model):\n    full_name = models.CharField(max_length=255, verbose_name=\"نام و نام خانوادگی\")\n    email = models.EmailField(verbose_name=\"ایمیل\")\n    phone_number = models.CharField(max_length=11, unique=True, verbose_name=\"شماره موبایل\")\n    body = models.TextField(verbose_name=\"متن\")\n    status = models.CharField(\n        max_length=2, choices=status_content_CHOICES, blank=True, default=\"B\", null=True, verbose_name=\"ضعیت\")\n    created = models.DateTimeField(auto_now=True, verbose_name=\"زمان ساخت\")\n    def __str__(self):\n        return f\"{self.full_name} | {self.email} | {self.phone_number} | {self.created}\"",
        "detail": "contact_us.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "contact_us.urls",
        "description": "contact_us.urls",
        "peekOfCode": "app_name = \"contact_us\"\nurlpatterns = [\n    path('', views.ContactUsView.as_view(), name=\"contact_us\"),\n    path('dashboard/contact/list/', views.ContactDashboard.as_view(), name=\"dashboard_contact_us\"),\n    path('dashboard/contact/delete/<int:pk>', views.ContactDashboardDelete.as_view(), name=\"dashboard_contact_us_delete\"),\n]",
        "detail": "contact_us.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "contact_us.urls",
        "description": "contact_us.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.ContactUsView.as_view(), name=\"contact_us\"),\n    path('dashboard/contact/list/', views.ContactDashboard.as_view(), name=\"dashboard_contact_us\"),\n    path('dashboard/contact/delete/<int:pk>', views.ContactDashboardDelete.as_view(), name=\"dashboard_contact_us_delete\"),\n]",
        "detail": "contact_us.urls",
        "documentation": {}
    },
    {
        "label": "ContactUsView",
        "kind": 6,
        "importPath": "contact_us.views",
        "description": "contact_us.views",
        "peekOfCode": "class ContactUsView(View):\n    form_class = ContactUsForm\n    def get(self, request, *args, **kwargs):\n        form = self.form_class\n        return render(request, 'contact_us/contact_us.html', {'form': form})\n    def post(self, request, *args, **kwargs):\n        form = self.form_class(request.POST)\n        if form.is_valid():\n            new_order = form.save(commit=False)\n            obj = new_order.save()",
        "detail": "contact_us.views",
        "documentation": {}
    },
    {
        "label": "ContactDashboard",
        "kind": 6,
        "importPath": "contact_us.views",
        "description": "contact_us.views",
        "peekOfCode": "class ContactDashboard(LoginRequiredMixin, View):\n    template_name = 'contact_us/admin/list.html'\n    def get(self, request, *args, **kwargs):\n        context = {}\n        contact_us = ContactUs.objects.all()\n        contact_us = ContactUsFilters(data=self.request.GET, queryset=contact_us).qs\n        context['status_types'] = status_CHOICES\n        context['contact_us'] = contact_us\n        return render(request, self.template_name, context)\nclass ContactDashboardDelete(DeleteView):",
        "detail": "contact_us.views",
        "documentation": {}
    },
    {
        "label": "ContactDashboardDelete",
        "kind": 6,
        "importPath": "contact_us.views",
        "description": "contact_us.views",
        "peekOfCode": "class ContactDashboardDelete(DeleteView):\n    model = ContactUs\n    template_name = 'contact_us/admin/list.html'\n    success_url = reverse_lazy('contact_us:dashboard_contact_us')\n    def dispatch(self, *args, **kwargs):\n        resp = super().dispatch(*args, **kwargs)\n        messages.success(self.request, 'آیتم مورد نظر با موفقیت حدف شد.')\n        return resp",
        "detail": "contact_us.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "content.migrations.0001_initial",
        "description": "content.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Content',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('type_content', models.CharField(blank=True, choices=[('A', 'UPVC (یو پی وی سی)'), ('B', ' آلومینیوم ترمال بریک'), ('C', ' شیشه نما')], max_length=2, null=True, verbose_name='نوع محتوا')),",
        "detail": "content.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "content.migrations.0002_content_cover_content_thumnail",
        "description": "content.migrations.0002_content_cover_content_thumnail",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('content', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='content',\n            name='cover',\n            field=models.ImageField(default='1.png', upload_to='', verbose_name='تصویر بزرگ'),\n        ),",
        "detail": "content.migrations.0002_content_cover_content_thumnail",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "content.migrations.0003_category_content_category",
        "description": "content.migrations.0003_category_content_category",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('content', '0002_content_cover_content_thumnail'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=225, null=True, verbose_name='نام دسته بندی')),",
        "detail": "content.migrations.0003_category_content_category",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "content.migrations.0004_remove_content_thumnail_content_thumbnail",
        "description": "content.migrations.0004_remove_content_thumnail_content_thumbnail",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('content', '0003_category_content_category'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='content',\n            name='thumnail',\n        ),\n        migrations.AddField(",
        "detail": "content.migrations.0004_remove_content_thumnail_content_thumbnail",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "content.migrations.0005_remove_content_type_content",
        "description": "content.migrations.0005_remove_content_type_content",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('content', '0004_remove_content_thumnail_content_thumbnail'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='content',\n            name='type_content',\n        ),\n    ]",
        "detail": "content.migrations.0005_remove_content_type_content",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "content.migrations.0006_alter_content_thumbnail",
        "description": "content.migrations.0006_alter_content_thumbnail",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('content', '0005_remove_content_type_content'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='content',\n            name='thumbnail',\n            field=models.ImageField(blank=True, null=True, upload_to='thumbnails/', verbose_name='تصویر بندانگشتی'),\n        ),",
        "detail": "content.migrations.0006_alter_content_thumbnail",
        "documentation": {}
    },
    {
        "label": "ContentAdmin",
        "kind": 6,
        "importPath": "content.admin",
        "description": "content.admin",
        "peekOfCode": "class ContentAdmin(admin.ModelAdmin):\n    list_display = ['title', 'slug', 'created', 'status']\n    search_fields = ('slug', 'created')\n    # prepopulated_fields = {\"slug\": ('title',)}\nadmin.site.register(Content, ContentAdmin)\nclass CategoryAdmin(admin.ModelAdmin):\n    list_display = ['title', 'slug', 'created', 'status']\n    search_fields = ('slug', 'created')\nadmin.site.register(Category, CategoryAdmin)",
        "detail": "content.admin",
        "documentation": {}
    },
    {
        "label": "CategoryAdmin",
        "kind": 6,
        "importPath": "content.admin",
        "description": "content.admin",
        "peekOfCode": "class CategoryAdmin(admin.ModelAdmin):\n    list_display = ['title', 'slug', 'created', 'status']\n    search_fields = ('slug', 'created')\nadmin.site.register(Category, CategoryAdmin)",
        "detail": "content.admin",
        "documentation": {}
    },
    {
        "label": "ContentConfig",
        "kind": 6,
        "importPath": "content.apps",
        "description": "content.apps",
        "peekOfCode": "class ContentConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"content\"\n    verbose_name = \"ماژول محتوا\"",
        "detail": "content.apps",
        "documentation": {}
    },
    {
        "label": "ContentFilters",
        "kind": 6,
        "importPath": "content.filters",
        "description": "content.filters",
        "peekOfCode": "class ContentFilters(filters.FilterSet):\n    search = filters.CharFilter(method=\"search_filter\")\n    status = filters.CharFilter(method=\"status_filter\")\n    type_content = filters.CharFilter(method=\"type_content_filter\")\n    limit = filters.CharFilter(method=\"limit_filter\")\n    category = filters.ModelChoiceFilter(\n        queryset=Category.objects.all())\n    @staticmethod\n    def search_filter(qs, name, value):\n        qs = qs.filter(",
        "detail": "content.filters",
        "documentation": {}
    },
    {
        "label": "CategoryFilters",
        "kind": 6,
        "importPath": "content.filters",
        "description": "content.filters",
        "peekOfCode": "class CategoryFilters(filters.FilterSet):\n    search = filters.CharFilter(method=\"search_filter\")\n    status = filters.CharFilter(method=\"status_filter\")\n    limit = filters.CharFilter(method=\"limit_filter\")\n    @staticmethod\n    def search_filter(qs, name, value):\n        qs = qs.filter(\n            Q(title__icontains=value) |\n            Q(slug__icontains=value) |\n            Q(body__icontains=value)",
        "detail": "content.filters",
        "documentation": {}
    },
    {
        "label": "ContentForm",
        "kind": 6,
        "importPath": "content.forms",
        "description": "content.forms",
        "peekOfCode": "class ContentForm(forms.ModelForm):\n    class Meta:\n        model = Content\n        fields = ['title', 'slug','category', 'body', 'cover', 'thumbnail', 'status']\n    def clean_slug(self):\n        slug = self.cleaned_data['slug']\n        if Content.objects.filter(slug=slug).exists():\n            raise forms.ValidationError(\"این slug قبلاً استفاده شده است.\")\n        return slug\nclass CategoryForm(forms.ModelForm):",
        "detail": "content.forms",
        "documentation": {}
    },
    {
        "label": "CategoryForm",
        "kind": 6,
        "importPath": "content.forms",
        "description": "content.forms",
        "peekOfCode": "class CategoryForm(forms.ModelForm):\n    class Meta:\n        model = Category\n        fields = ['title', 'status']",
        "detail": "content.forms",
        "documentation": {}
    },
    {
        "label": "type_content_CHOICES",
        "kind": 5,
        "importPath": "content.helpers",
        "description": "content.helpers",
        "peekOfCode": "type_content_CHOICES = (\n    ('A', 'UPVC (یو پی وی سی)'),\n    ('B', ' آلومینیوم ترمال بریک'),\n    ('C', ' شیشه نما'),\n)\nstatus_content_CHOICES = (\n    ('A', 'نشان داده شود'),\n    ('B', 'نشان داده نشود'),\n)",
        "detail": "content.helpers",
        "documentation": {}
    },
    {
        "label": "status_content_CHOICES",
        "kind": 5,
        "importPath": "content.helpers",
        "description": "content.helpers",
        "peekOfCode": "status_content_CHOICES = (\n    ('A', 'نشان داده شود'),\n    ('B', 'نشان داده نشود'),\n)",
        "detail": "content.helpers",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "content.models",
        "description": "content.models",
        "peekOfCode": "class Category(models.Model):\n    title = models.CharField(max_length=225, blank=False,\n                             null=True, verbose_name=\"نام دسته بندی\")\n    slug = models.SlugField(max_length=200, unique=True,\n                            blank=True, verbose_name=\"ادرس\")\n    status = models.CharField(\n        max_length=2, choices=status_content_CHOICES, blank=True, null=True, verbose_name=\"ضعیت\")\n    created = models.DateTimeField(auto_now=True, verbose_name=\"زمان ساخت\")\n    def __str__(self):\n        return f\"{self.title}\"",
        "detail": "content.models",
        "documentation": {}
    },
    {
        "label": "Content",
        "kind": 6,
        "importPath": "content.models",
        "description": "content.models",
        "peekOfCode": "class Content(models.Model):\n    # type_content = models.CharField(\n    #     max_length=2, choices=type_content_CHOICES, blank=True, null=True, verbose_name=\"نوع محتوا\")\n    title = models.CharField(max_length=225, blank=False,\n                             null=True, verbose_name=\"عنوان محتوا\")\n    slug = models.SlugField(max_length=200, unique=True,\n                            blank=True, verbose_name=\"ادرس\")\n    category = models.ForeignKey(Category, blank=True, null=True,\n                                 on_delete=models.CASCADE, related_name=\"content\", verbose_name=\"دسته بندی\")\n    body = models.TextField(verbose_name=\"متن\")",
        "detail": "content.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "content.urls",
        "description": "content.urls",
        "peekOfCode": "app_name = \"content\"\nurlpatterns = [\n    path('upvc/', views.ContentUPVC.as_view(), name='home_upvc'),\n    path('thermal_break/', views.ContentTermal.as_view(), name='home_termal'),\n    path('curtain_wall/', views.Contentnama.as_view(), name='home_nama'),\n    path('contents/', views.ContentListView.as_view(), name='home_list_content'),\n    path('contents/<int:c_id>/<slug:c_slug>/',views.ContentDetailView.as_view(), name='home_detail_content'),\n    path('dashboard/contents/', views.ContentDashboardListView.as_view(),\n         name='dashboard_content_list'),\n    path('dashboard/contents/create/', views.ContentDashboardCreateView.as_view(),",
        "detail": "content.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "content.urls",
        "description": "content.urls",
        "peekOfCode": "urlpatterns = [\n    path('upvc/', views.ContentUPVC.as_view(), name='home_upvc'),\n    path('thermal_break/', views.ContentTermal.as_view(), name='home_termal'),\n    path('curtain_wall/', views.Contentnama.as_view(), name='home_nama'),\n    path('contents/', views.ContentListView.as_view(), name='home_list_content'),\n    path('contents/<int:c_id>/<slug:c_slug>/',views.ContentDetailView.as_view(), name='home_detail_content'),\n    path('dashboard/contents/', views.ContentDashboardListView.as_view(),\n         name='dashboard_content_list'),\n    path('dashboard/contents/create/', views.ContentDashboardCreateView.as_view(),\n         name='dashboard_content_create'),",
        "detail": "content.urls",
        "documentation": {}
    },
    {
        "label": "ContentUPVC",
        "kind": 6,
        "importPath": "content.views",
        "description": "content.views",
        "peekOfCode": "class ContentUPVC(View):\n    template_name = 'content/upvc.html'\n    def get(self, request, *args, **kwargs):\n        context = {}\n        context['form'] = OrderForm()\n        return render(request, self.template_name, context)\nclass ContentTermal(View):\n    template_name = 'content/termal.html'\n    def get(self, request, *args, **kwargs):\n        context = {}",
        "detail": "content.views",
        "documentation": {}
    },
    {
        "label": "ContentTermal",
        "kind": 6,
        "importPath": "content.views",
        "description": "content.views",
        "peekOfCode": "class ContentTermal(View):\n    template_name = 'content/termal.html'\n    def get(self, request, *args, **kwargs):\n        context = {}\n        context['form'] = OrderForm()\n        return render(request, self.template_name, context)\nclass Contentnama(View):\n    template_name = 'content/nama.html'\n    def get(self, request, *args, **kwargs):\n        context = {}",
        "detail": "content.views",
        "documentation": {}
    },
    {
        "label": "Contentnama",
        "kind": 6,
        "importPath": "content.views",
        "description": "content.views",
        "peekOfCode": "class Contentnama(View):\n    template_name = 'content/nama.html'\n    def get(self, request, *args, **kwargs):\n        context = {}\n        context['form'] = OrderForm()\n        return render(request, self.template_name, context)\nclass ContentListView(View):\n    template_name = 'content/list_content.html'\n    def get(self, request, *args, **kwargs):\n        contents = Content.objects.filter(status='A')",
        "detail": "content.views",
        "documentation": {}
    },
    {
        "label": "ContentListView",
        "kind": 6,
        "importPath": "content.views",
        "description": "content.views",
        "peekOfCode": "class ContentListView(View):\n    template_name = 'content/list_content.html'\n    def get(self, request, *args, **kwargs):\n        contents = Content.objects.filter(status='A')\n        context = {\n            'form': OrderForm(),\n            'type_content_name': '',\n        }\n        type_content = request.GET.get('type_content')\n        if type_content:",
        "detail": "content.views",
        "documentation": {}
    },
    {
        "label": "ContentDetailView",
        "kind": 6,
        "importPath": "content.views",
        "description": "content.views",
        "peekOfCode": "class ContentDetailView(View):\n    template_name = 'content/detail_content.html'\n    def get(self, request, c_id, c_slug):\n        content = get_object_or_404(Content, id=c_id, slug=c_slug)\n        context = {\n            'content': content,\n        }\n        return render(request, self.template_name, context)\nclass ContentDashboardListView(ListView):\n    model = Content",
        "detail": "content.views",
        "documentation": {}
    },
    {
        "label": "ContentDashboardListView",
        "kind": 6,
        "importPath": "content.views",
        "description": "content.views",
        "peekOfCode": "class ContentDashboardListView(ListView):\n    model = Content\n    template_name = 'content/admin/list.html'\n    context_object_name = 'contents'\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        contents = Content.objects.all()\n        filtered_contents = ContentFilters(\n            data=self.request.GET, queryset=contents).qs\n        context['contents'] = filtered_contents",
        "detail": "content.views",
        "documentation": {}
    },
    {
        "label": "ContentDashboardCreateView",
        "kind": 6,
        "importPath": "content.views",
        "description": "content.views",
        "peekOfCode": "class ContentDashboardCreateView(CreateView):\n    model = Content\n    template_name = 'content/admin/create_edit.html'\n    form_class = ContentForm\n    success_url = reverse_lazy('content:dashboard_content_list')\nclass ContentDashboardUpdateView(UpdateView):\n    model = Content\n    template_name = 'content/admin/create_edit.html'\n    form_class = ContentForm\n    success_url = reverse_lazy('content:dashboard_content_list')",
        "detail": "content.views",
        "documentation": {}
    },
    {
        "label": "ContentDashboardUpdateView",
        "kind": 6,
        "importPath": "content.views",
        "description": "content.views",
        "peekOfCode": "class ContentDashboardUpdateView(UpdateView):\n    model = Content\n    template_name = 'content/admin/create_edit.html'\n    form_class = ContentForm\n    success_url = reverse_lazy('content:dashboard_content_list')\nclass ContentDashboardDeleteView(DeleteView):\n    model = Content\n    template_name = 'content/admin/create_edit.html'\n    success_url = reverse_lazy('content:dashboard_content_list')\n# ========================= Category =========================",
        "detail": "content.views",
        "documentation": {}
    },
    {
        "label": "ContentDashboardDeleteView",
        "kind": 6,
        "importPath": "content.views",
        "description": "content.views",
        "peekOfCode": "class ContentDashboardDeleteView(DeleteView):\n    model = Content\n    template_name = 'content/admin/create_edit.html'\n    success_url = reverse_lazy('content:dashboard_content_list')\n# ========================= Category =========================\nclass CategoryListView(ListView):\n    model = Category\n    template_name = 'content/admin/category/list.html'\n    context_object_name = 'categories'\n    def get_context_data(self, **kwargs):",
        "detail": "content.views",
        "documentation": {}
    },
    {
        "label": "CategoryListView",
        "kind": 6,
        "importPath": "content.views",
        "description": "content.views",
        "peekOfCode": "class CategoryListView(ListView):\n    model = Category\n    template_name = 'content/admin/category/list.html'\n    context_object_name = 'categories'\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        contents = Category.objects.all()\n        filtered_contents = CategoryFilters(\n            data=self.request.GET, queryset=contents).qs\n        context['categories'] = filtered_contents",
        "detail": "content.views",
        "documentation": {}
    },
    {
        "label": "CategoryCreateView",
        "kind": 6,
        "importPath": "content.views",
        "description": "content.views",
        "peekOfCode": "class CategoryCreateView(CreateView):\n    model = Category\n    template_name = 'content/admin/category/create_edit.html'\n    fields = ['title', 'status']\n    success_url = reverse_lazy('content:dashboard_category_list')\nclass CategoryUpdateView(UpdateView):\n    model = Category\n    template_name = 'content/admin/category/create_edit.html'\n    fields = ['title', 'status']\n    success_url = reverse_lazy('content:dashboard_category_list')",
        "detail": "content.views",
        "documentation": {}
    },
    {
        "label": "CategoryUpdateView",
        "kind": 6,
        "importPath": "content.views",
        "description": "content.views",
        "peekOfCode": "class CategoryUpdateView(UpdateView):\n    model = Category\n    template_name = 'content/admin/category/create_edit.html'\n    fields = ['title', 'status']\n    success_url = reverse_lazy('content:dashboard_category_list')\nclass CategoryDeleteView(DeleteView):\n    model = Category\n    template_name = 'content/admin/category/list.html'\n    success_url = reverse_lazy('content:dashboard_category_list')\n    def dispatch(self, *args, **kwargs):",
        "detail": "content.views",
        "documentation": {}
    },
    {
        "label": "CategoryDeleteView",
        "kind": 6,
        "importPath": "content.views",
        "description": "content.views",
        "peekOfCode": "class CategoryDeleteView(DeleteView):\n    model = Category\n    template_name = 'content/admin/category/list.html'\n    success_url = reverse_lazy('content:dashboard_category_list')\n    def dispatch(self, *args, **kwargs):\n        resp = super().dispatch(*args, **kwargs)\n        messages.success(self.request, 'آیتم مورد نظر با موفقیت حدف شد.')\n        return resp",
        "detail": "content.views",
        "documentation": {}
    },
    {
        "label": "Gregorian",
        "kind": 6,
        "importPath": "extenstions.jalali",
        "description": "extenstions.jalali",
        "peekOfCode": "class Gregorian:\n    def __init__(self, *date):\n        # Parse date\n        if len(date) == 1:\n            date = date[0]\n            if type(date) is str:\n                m = re.match(r'^(\\d{4})\\D(\\d{1,2})\\D(\\d{1,2})$', date)\n                if m:\n                    [year, month, day] = [int(m.group(1)), int(\n                        m.group(2)), int(m.group(3))]",
        "detail": "extenstions.jalali",
        "documentation": {}
    },
    {
        "label": "Persian",
        "kind": 6,
        "importPath": "extenstions.jalali",
        "description": "extenstions.jalali",
        "peekOfCode": "class Persian:\n    def __init__(self, *date):\n        # Parse date\n        if len(date) == 1:\n            date = date[0]\n            if type(date) is str:\n                m = re.match(r'^(\\d{4})\\D(\\d{1,2})\\D(\\d{1,2})$', date)\n                if m:\n                    [year, month, day] = [int(m.group(1)), int(\n                        m.group(2)), int(m.group(3))]",
        "detail": "extenstions.jalali",
        "documentation": {}
    },
    {
        "label": "persion_numbers_converter",
        "kind": 2,
        "importPath": "extenstions.utils",
        "description": "extenstions.utils",
        "peekOfCode": "def persion_numbers_converter(mystr):\n    numbers = {\n        \"0\": \"۰\",\n        \"1\": \"۱\",\n        \"2\": \"۲\",\n        \"3\": \"۳\",\n        \"4\": \"۴\",\n        \"5\": \"۵\",\n        \"6\": \"۶\",\n        \"7\": \"۷\",",
        "detail": "extenstions.utils",
        "documentation": {}
    },
    {
        "label": "jalali_converter",
        "kind": 2,
        "importPath": "extenstions.utils",
        "description": "extenstions.utils",
        "peekOfCode": "def jalali_converter(time):\n    jmonths = ['فروردین', 'اردیبهشت', 'خرداد', 'تیر', 'مرداد', 'شهریور', 'مهر', 'آبان', 'آذر', 'دی', 'بهمن', 'اسفند']\n    time = timezone.localtime(time)\n    time_to_str = \"{},{},{}\".format(time.year, time.month, time.day)\n    time_to_tuple = jalali.Gregorian(time_to_str).persian_tuple()\n    time_to_list = list(time_to_tuple)\n    for index, month in enumerate(jmonths):\n        if time_to_list[1] == index + 1 :\n            time_to_list[1] = month\n            break",
        "detail": "extenstions.utils",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "faq.migrations.0001_initial",
        "description": "faq.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='FAQ',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=255, verbose_name='عنوان سوال')),",
        "detail": "faq.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "faq.migrations.0002_faq_type_faq",
        "description": "faq.migrations.0002_faq_type_faq",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('content', '0001_initial'),\n        ('faq', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='faq',\n            name='type_faq',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='faqs', to='content.content', verbose_name='نوع سوال'),",
        "detail": "faq.migrations.0002_faq_type_faq",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "faq.migrations.0003_remove_faq_type_faq",
        "description": "faq.migrations.0003_remove_faq_type_faq",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('faq', '0002_faq_type_faq'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='faq',\n            name='type_faq',\n        ),\n    ]",
        "detail": "faq.migrations.0003_remove_faq_type_faq",
        "documentation": {}
    },
    {
        "label": "FaqConfig",
        "kind": 6,
        "importPath": "faq.apps",
        "description": "faq.apps",
        "peekOfCode": "class FaqConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'faq'",
        "detail": "faq.apps",
        "documentation": {}
    },
    {
        "label": "FAQForm",
        "kind": 6,
        "importPath": "faq.forms",
        "description": "faq.forms",
        "peekOfCode": "class FAQForm(forms.ModelForm):\n    class Meta:\n        model = FAQ\n        fields = '__all__'\n        widgets = {\n            'body': forms.Textarea(attrs={'class': 'form-control'})\n        }",
        "detail": "faq.forms",
        "documentation": {}
    },
    {
        "label": "FAQ",
        "kind": 6,
        "importPath": "faq.models",
        "description": "faq.models",
        "peekOfCode": "class FAQ(models.Model):\n    title = models.CharField(max_length=255, verbose_name=\"عنوان سوال\")\n    body = models.TextField(verbose_name=\"متن سوال\")\n    def __str__(self):\n        return f\"{self.title}\"\n    class Meta:\n        verbose_name = \"سوال\"\n        verbose_name_plural = \"سوال ها\"",
        "detail": "faq.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "faq.urls",
        "description": "faq.urls",
        "peekOfCode": "app_name = \"faq\"\nurlpatterns = [\n    path('', views.FAQListView.as_view(), name='faq_page'),\n    path('dashboard/create', views.FAQCreateView.as_view(), name='create_faq'),\n    path('dashboard/list', views.FAQDashboardList.as_view(), name='list_faq'),\n    path('dashboard/edit/<int:pk>', views.FAQUpdateView.as_view(), name='update_faq'),\n    path('dashboard/delete/<int:pk>', views.FAQDashboardDelete.as_view(), name='delete_faq'),\n]",
        "detail": "faq.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "faq.urls",
        "description": "faq.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.FAQListView.as_view(), name='faq_page'),\n    path('dashboard/create', views.FAQCreateView.as_view(), name='create_faq'),\n    path('dashboard/list', views.FAQDashboardList.as_view(), name='list_faq'),\n    path('dashboard/edit/<int:pk>', views.FAQUpdateView.as_view(), name='update_faq'),\n    path('dashboard/delete/<int:pk>', views.FAQDashboardDelete.as_view(), name='delete_faq'),\n]",
        "detail": "faq.urls",
        "documentation": {}
    },
    {
        "label": "FAQListView",
        "kind": 6,
        "importPath": "faq.views",
        "description": "faq.views",
        "peekOfCode": "class FAQListView(View):\n    template_name = 'faq/faq.html'\n    def get(self, request, *args, **kwargs):\n        faqs = FAQ.objects.all()\n        context = {'faqs': faqs}\n        return render(request, self.template_name, context)\nclass FAQCreateView(View):\n    form_class = FAQForm\n    template_name = 'faq/admin/create_edit.html'\n    def get(self, request, *args, **kwargs):",
        "detail": "faq.views",
        "documentation": {}
    },
    {
        "label": "FAQCreateView",
        "kind": 6,
        "importPath": "faq.views",
        "description": "faq.views",
        "peekOfCode": "class FAQCreateView(View):\n    form_class = FAQForm\n    template_name = 'faq/admin/create_edit.html'\n    def get(self, request, *args, **kwargs):\n        form = self.form_class\n        return render(request, self.template_name, {'form': form})\n    def post(self, request, *args, **kwargs):\n        form = self.form_class(request.POST)\n        if form.is_valid():\n            new_faq = form.save(commit=False)",
        "detail": "faq.views",
        "documentation": {}
    },
    {
        "label": "FAQUpdateView",
        "kind": 6,
        "importPath": "faq.views",
        "description": "faq.views",
        "peekOfCode": "class FAQUpdateView(LoginRequiredMixin, UpdateView):\n    form_class = FAQForm\n    template_name = 'faq/admin/create_edit.html'\n    def setup(self, request, *args, **kwargs):\n        self.faqs = get_object_or_404(FAQ, pk=kwargs['pk'])\n        return super().setup(request, *args, **kwargs)\n    def dispatch(self, request, *args, **kwargs):\n        post = self.faqs\n        return super().dispatch(request, *args, **kwargs)\n    def get(self, request, *args, **kwargs):",
        "detail": "faq.views",
        "documentation": {}
    },
    {
        "label": "FAQDashboardDelete",
        "kind": 6,
        "importPath": "faq.views",
        "description": "faq.views",
        "peekOfCode": "class FAQDashboardDelete(DeleteView):\n    model = FAQ\n    template_name = 'faq/admin/list.html'\n    success_url = reverse_lazy('faq:list_faq')\n    def dispatch(self, *args, **kwargs):\n        resp = super().dispatch(*args, **kwargs)\n        messages.success(self.request, 'آیتم مورد نظر با موفقیت حدف شد.')\n        return resp\nclass FAQDashboardList(LoginRequiredMixin, View):\n    template_name = 'faq/admin/list.html'",
        "detail": "faq.views",
        "documentation": {}
    },
    {
        "label": "FAQDashboardList",
        "kind": 6,
        "importPath": "faq.views",
        "description": "faq.views",
        "peekOfCode": "class FAQDashboardList(LoginRequiredMixin, View):\n    template_name = 'faq/admin/list.html'\n    def get(self, request, *args, **kwargs):\n        faqs = FAQ.objects.all()\n        context = {'faqs': faqs}\n        return render(request, self.template_name, context)",
        "detail": "faq.views",
        "documentation": {}
    },
    {
        "label": "OrderSerializer",
        "kind": 6,
        "importPath": "order.api.serializers",
        "description": "order.api.serializers",
        "peekOfCode": "class OrderSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Order\n        fields = \"__all__\"",
        "detail": "order.api.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "order.api.urls",
        "description": "order.api.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register('', OrderViewSet, \"order\")\nurlpatterns = [\n    path('', include(router.urls))\n]",
        "detail": "order.api.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "order.api.urls",
        "description": "order.api.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls))\n]",
        "detail": "order.api.urls",
        "documentation": {}
    },
    {
        "label": "OrderViewSet",
        "kind": 6,
        "importPath": "order.api.views",
        "description": "order.api.views",
        "peekOfCode": "class OrderViewSet(viewsets.ModelViewSet):\n    permission_classes = [IsAdminUser]\n    queryset = Order.objects.all()\n    serializer_class = OrderSerializer\n    def get_permissions(self):\n        if self.action == 'create':\n            self.permission_classes = []\n        return super().get_permissions()",
        "detail": "order.api.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "order.migrations.0001_initial",
        "description": "order.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='TypeWindow',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255, verbose_name='نام پنجره')),",
        "detail": "order.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "OrderConfig",
        "kind": 6,
        "importPath": "order.apps",
        "description": "order.apps",
        "peekOfCode": "class OrderConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'order'\n    verbose_name = \"ماژول سفارشات\"",
        "detail": "order.apps",
        "documentation": {}
    },
    {
        "label": "OrderFilters",
        "kind": 6,
        "importPath": "order.filters",
        "description": "order.filters",
        "peekOfCode": "class OrderFilters(filters.FilterSet):\n    search = filters.CharFilter(method=\"search_filter\")\n    status = filters.CharFilter(method=\"status_filter\")\n    type_window = filters.CharFilter(method=\"type_window_filter\")\n    type_project = filters.CharFilter(method=\"type_project_filter\")\n    limit = filters.CharFilter(method=\"limit_filter\")\n    @staticmethod\n    def search_filter(qs, name, value):\n        qs = qs.filter(\n            Q(full_name__icontains=value) |",
        "detail": "order.filters",
        "documentation": {}
    },
    {
        "label": "OrderForm",
        "kind": 6,
        "importPath": "order.forms",
        "description": "order.forms",
        "peekOfCode": "class OrderForm(forms.ModelForm):\n    class Meta:\n        model = Order\n        exclude = ['created']\n        widgets = {\n            'body': forms.Textarea(attrs={'class': 'form-control'}),\n            'lat': forms.HiddenInput(),\n            'long': forms.HiddenInput(),\n        }\n    def __init__(self, *args, **kwargs):",
        "detail": "order.forms",
        "documentation": {}
    },
    {
        "label": "OrderChangeStatusForm",
        "kind": 6,
        "importPath": "order.forms",
        "description": "order.forms",
        "peekOfCode": "class OrderChangeStatusForm(forms.ModelForm):\n    class Meta:\n        model = Order\n        fields = ['status']\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        for name, field in self.fields.items():\n            field.widget.attrs.update({'ng-model': name})",
        "detail": "order.forms",
        "documentation": {}
    },
    {
        "label": "type_project_CHOICES",
        "kind": 5,
        "importPath": "order.helpers",
        "description": "order.helpers",
        "peekOfCode": "type_project_CHOICES = (\n    ('A', 'نوساز'),\n    ('B', 'بازسازی'),\n)\nstatus_CHOICES = (\n    ('A', 'پیگیری شده'),\n    ('B', 'پیگیره نشده'),\n)\ncity_CHOICES = (\n    ('1', 'آذربایجان شرقی'),",
        "detail": "order.helpers",
        "documentation": {}
    },
    {
        "label": "status_CHOICES",
        "kind": 5,
        "importPath": "order.helpers",
        "description": "order.helpers",
        "peekOfCode": "status_CHOICES = (\n    ('A', 'پیگیری شده'),\n    ('B', 'پیگیره نشده'),\n)\ncity_CHOICES = (\n    ('1', 'آذربایجان شرقی'),\n    ('2', 'آذربایجان غربی'),\n    ('3', 'اردبیل'),\n    ('4', 'اصفهان'),\n    ('5', 'البرز'),",
        "detail": "order.helpers",
        "documentation": {}
    },
    {
        "label": "city_CHOICES",
        "kind": 5,
        "importPath": "order.helpers",
        "description": "order.helpers",
        "peekOfCode": "city_CHOICES = (\n    ('1', 'آذربایجان شرقی'),\n    ('2', 'آذربایجان غربی'),\n    ('3', 'اردبیل'),\n    ('4', 'اصفهان'),\n    ('5', 'البرز'),\n    ('6', 'ایلام'),\n    ('7', 'بوشهر'),\n    ('8', 'تهران'),\n    ('9', 'چهارمحال و بختیاری'),",
        "detail": "order.helpers",
        "documentation": {}
    },
    {
        "label": "CheckOrderOwnerMixin",
        "kind": 6,
        "importPath": "order.mixins",
        "description": "order.mixins",
        "peekOfCode": "class CheckOrderOwnerMixin:\n    def get_queryset(self, request):\n        if request.user.is_staff:\n            return Order.objects.filter()\n        return Order.objects.all()",
        "detail": "order.mixins",
        "documentation": {}
    },
    {
        "label": "TypeWindow",
        "kind": 6,
        "importPath": "order.models",
        "description": "order.models",
        "peekOfCode": "class TypeWindow(models.Model):\n    name = models.CharField(max_length=255, verbose_name=\"نام پنجره\")\n    def __str__(self):\n        return f\"{self.name}\"\n    class Meta:\n        verbose_name = \"نوع پنجره\"\n        verbose_name_plural = \"نوع پنجره ها\"\nclass Order(models.Model):\n    type_window = models.ForeignKey(\n        to=TypeWindow, on_delete=models.CASCADE, related_name=\"orders\", verbose_name=\"نوع پنجره\"",
        "detail": "order.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "order.models",
        "description": "order.models",
        "peekOfCode": "class Order(models.Model):\n    type_window = models.ForeignKey(\n        to=TypeWindow, on_delete=models.CASCADE, related_name=\"orders\", verbose_name=\"نوع پنجره\"\n    )\n    type_project = models.CharField(\n        max_length=2, choices=type_project_CHOICES, null=True, verbose_name=\"نوع پروژه \")\n    number = models.FloatField(max_length=1000, null=True, verbose_name=\"تعداد واحد \")\n    phone_number = models.CharField(\n        max_length=11, unique=True, null=True, verbose_name=\"شماره تماس\")\n    full_name = models.CharField(",
        "detail": "order.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "order.urls",
        "description": "order.urls",
        "peekOfCode": "app_name = \"order\"\nurlpatterns = [\n    # TODO remove this line after approval\n    path('test_map_ir', views.test_map_ir, name='test_map_ir'),\n    path('test_show_map_ir', views.test_show_map_ir, name='test_show_map_ir'),\n    path('test_submit_order_angular_js', views.test_submit_order_angular_js, name='test_submit_order_angular_js'),\n    path('', views.OrderCreateView.as_view(), name='order_home'),\n    path('dashboard/', views.Dashboard.as_view(), name='dashboard'),\n    path('dashboard/order/list/', views.OrderDashboardList.as_view(), name='dashboard_order_list'),\n    path('dashboard/order/<int:o_id>/', views.OrderDashboardDetail.as_view(), name='dashboard_order_detail'),",
        "detail": "order.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "order.urls",
        "description": "order.urls",
        "peekOfCode": "urlpatterns = [\n    # TODO remove this line after approval\n    path('test_map_ir', views.test_map_ir, name='test_map_ir'),\n    path('test_show_map_ir', views.test_show_map_ir, name='test_show_map_ir'),\n    path('test_submit_order_angular_js', views.test_submit_order_angular_js, name='test_submit_order_angular_js'),\n    path('', views.OrderCreateView.as_view(), name='order_home'),\n    path('dashboard/', views.Dashboard.as_view(), name='dashboard'),\n    path('dashboard/order/list/', views.OrderDashboardList.as_view(), name='dashboard_order_list'),\n    path('dashboard/order/<int:o_id>/', views.OrderDashboardDetail.as_view(), name='dashboard_order_detail'),\n    path('dashboard/order/delete/<int:pk>', views.OrderDashboardDelete.as_view(), name='dashboard_order_delete'),",
        "detail": "order.urls",
        "documentation": {}
    },
    {
        "label": "OrderCreateView",
        "kind": 6,
        "importPath": "order.views",
        "description": "order.views",
        "peekOfCode": "class OrderCreateView(View):\n    form_class = OrderForm\n    def get(self, request, *args, **kwargs):\n        form = self.form_class\n        return render(request, 'order/front/home.html', {'form': form})\n    def post(self, request, *args, **kwargs):\n        form = self.form_class(request.POST)\n        if form.is_valid():\n            new_order = form.save(commit=False)\n            obj = new_order.save()",
        "detail": "order.views",
        "documentation": {}
    },
    {
        "label": "Dashboard",
        "kind": 6,
        "importPath": "order.views",
        "description": "order.views",
        "peekOfCode": "class Dashboard(LoginRequiredMixin, View):\n    template_name = 'order/admin/dashboard.html'\n    def get(self, request, *args, **kwargs):\n        orders = Order.objects.order_by('-id')\n        if not request.user.is_staff:\n            orders = orders.filter(phone_number=request.user.phone_number)\n        contents = Content.objects.order_by('-id')\n        context = {'orders': orders, 'contents': contents}\n        return render(request, self.template_name, context)\nclass OrderDashboardList(LoginRequiredMixin, View):",
        "detail": "order.views",
        "documentation": {}
    },
    {
        "label": "OrderDashboardList",
        "kind": 6,
        "importPath": "order.views",
        "description": "order.views",
        "peekOfCode": "class OrderDashboardList(LoginRequiredMixin, View):\n    template_name = 'order/admin/order.html'\n    def get(self, request, *args, **kwargs):\n        orders = Order.objects.all()\n        if not request.user.is_staff:\n            orders = orders.filter(phone_number=request.user.phone_number)\n        orders = OrderFilters(data=self.request.GET, queryset=orders).qs\n        type_windows = TypeWindow.objects.all()\n        type_projects = type_project_CHOICES\n        status_types = status_CHOICES",
        "detail": "order.views",
        "documentation": {}
    },
    {
        "label": "OrderDashboardDetail",
        "kind": 6,
        "importPath": "order.views",
        "description": "order.views",
        "peekOfCode": "class OrderDashboardDetail(DetailView):\n    model = Order\n    def setup(self, request, *args, **kwargs):\n        self.order_instance = get_object_or_404(Order, pk=kwargs['o_id'])\n        return super().setup(request, *args, **kwargs)\n    def get(self, request, *args, **kwargs):\n        orders = Order.objects.all()\n        return render(request, 'order/admin/detail_order.html',\n                      {'order': self.order_instance})\nclass OrderDashboardDelete(DeleteView):",
        "detail": "order.views",
        "documentation": {}
    },
    {
        "label": "OrderDashboardDelete",
        "kind": 6,
        "importPath": "order.views",
        "description": "order.views",
        "peekOfCode": "class OrderDashboardDelete(DeleteView):\n    model = Order\n    template_name = 'order/admin/order.html'\n    success_url = reverse_lazy('order:dashboard_order_list')\n    def dispatch(self, *args, **kwargs):\n        resp = super().dispatch(*args, **kwargs)\n        messages.success(self.request, 'آیتم مورد نظر با موفقیت حدف شد.')\n        return resp\n# PDF\nclass OrderPDFView(LoginRequiredMixin, ListView):",
        "detail": "order.views",
        "documentation": {}
    },
    {
        "label": "OrderPDFView",
        "kind": 6,
        "importPath": "order.views",
        "description": "order.views",
        "peekOfCode": "class OrderPDFView(LoginRequiredMixin, ListView):\n    model = Order\n    template_name = 'order/pdf.html'\n    queryset = Order.objects.all()",
        "detail": "order.views",
        "documentation": {}
    },
    {
        "label": "test_map_ir",
        "kind": 2,
        "importPath": "order.views",
        "description": "order.views",
        "peekOfCode": "def test_map_ir(request):\n    context = {\n        'form': OrderForm()\n    }\n    return render(request, 'test_map_ir.html', context)\ndef test_show_map_ir(request):\n    context = {\n        'form': OrderForm(instance=Order.objects.last())\n    }\n    return render(request, 'test_map_ir.html', context)",
        "detail": "order.views",
        "documentation": {}
    },
    {
        "label": "test_show_map_ir",
        "kind": 2,
        "importPath": "order.views",
        "description": "order.views",
        "peekOfCode": "def test_show_map_ir(request):\n    context = {\n        'form': OrderForm(instance=Order.objects.last())\n    }\n    return render(request, 'test_map_ir.html', context)\ndef test_submit_order_angular_js(request):\n    context = {\n        'form': OrderForm()\n    }\n    print('wwwwwwwwwwwwwwwwwwww')",
        "detail": "order.views",
        "documentation": {}
    },
    {
        "label": "test_submit_order_angular_js",
        "kind": 2,
        "importPath": "order.views",
        "description": "order.views",
        "peekOfCode": "def test_submit_order_angular_js(request):\n    context = {\n        'form': OrderForm()\n    }\n    print('wwwwwwwwwwwwwwwwwwww')\n    print(Order.objects.count())\n    return render(request, 'test_submit_order_angular_js.html', context)\ndef home(request):\n    return render(request, 'order/home.html')\nclass OrderCreateView(View):",
        "detail": "order.views",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "order.views",
        "description": "order.views",
        "peekOfCode": "def home(request):\n    return render(request, 'order/home.html')\nclass OrderCreateView(View):\n    form_class = OrderForm\n    def get(self, request, *args, **kwargs):\n        form = self.form_class\n        return render(request, 'order/front/home.html', {'form': form})\n    def post(self, request, *args, **kwargs):\n        form = self.form_class(request.POST)\n        if form.is_valid():",
        "detail": "order.views",
        "documentation": {}
    },
    {
        "label": "SmsGroupSerializer",
        "kind": 6,
        "importPath": "sms.api.serializers",
        "description": "sms.api.serializers",
        "peekOfCode": "class SmsGroupSerializer(serializers.Serializer):\n    users = serializers.ListField(child=serializers.PrimaryKeyRelatedField(queryset=User.objects.all()))\n    message = serializers.CharField()\n    def save(self, **kwargs):\n        phones = [item.phone for item in self.validated_data.get('users')]\n        message = self.validated_data.get('message')\n        for phone in phones:\n            send_sms(phone, message)\n        return True",
        "detail": "sms.api.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "sms.api.serializers",
        "description": "sms.api.serializers",
        "peekOfCode": "User = get_user_model()\nclass SmsGroupSerializer(serializers.Serializer):\n    users = serializers.ListField(child=serializers.PrimaryKeyRelatedField(queryset=User.objects.all()))\n    message = serializers.CharField()\n    def save(self, **kwargs):\n        phones = [item.phone for item in self.validated_data.get('users')]\n        message = self.validated_data.get('message')\n        for phone in phones:\n            send_sms(phone, message)\n        return True",
        "detail": "sms.api.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "sms.api.urls",
        "description": "sms.api.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register('', SmsViewSet, \"sms\")\nurlpatterns = [\n    path('', include(router.urls))\n]",
        "detail": "sms.api.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "sms.api.urls",
        "description": "sms.api.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls))\n]",
        "detail": "sms.api.urls",
        "documentation": {}
    },
    {
        "label": "SmsViewSet",
        "kind": 6,
        "importPath": "sms.api.views",
        "description": "sms.api.views",
        "peekOfCode": "class SmsViewSet(viewsets.GenericViewSet):\n    permission_classes = [RestPermissionMixin]\n    permissions = ['sms_list', 'sms_send']\n    serializer_class = SmsGroupSerializer\n    @action(\n        detail=False,\n        methods=['post'],\n        url_path='group/send',\n    )\n    def send_group_sms(self, request):",
        "detail": "sms.api.views",
        "documentation": {}
    },
    {
        "label": "SmsConfig",
        "kind": 6,
        "importPath": "sms.apps",
        "description": "sms.apps",
        "peekOfCode": "class SmsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'sms'",
        "detail": "sms.apps",
        "documentation": {}
    },
    {
        "label": "send_sms",
        "kind": 2,
        "importPath": "sms.helpers",
        "description": "sms.helpers",
        "peekOfCode": "def send_sms(receiver, body_id, param):\n    data = {\n        'username': settings.SMS_USERNAME,\n        'password': settings.SMS_PASSWORD,\n        'text': f'{param}',\n        'to': receiver,\n        'bodyId': body_id,\n    }\n    response = requests.post(settings.SMS_WEB_SERVICE_URL, data)\n    # api_key = '6A7A663139434F576369452F385972337444784A637A505374637147524C396F6F7A6B4338614333414F453D'",
        "detail": "sms.helpers",
        "documentation": {}
    },
    {
        "label": "SMS_TEXTS",
        "kind": 5,
        "importPath": "sms.sms_texts",
        "description": "sms.sms_texts",
        "peekOfCode": "SMS_TEXTS = {\n    'verify_code': '134670',\n    'welcome_message': '134669',\n    'order_message': \"134668\",\n    'order_message_2': \"کاربر گرامی {0}\\nدرخواست شما با موفقیت ثبت گردید.\\nهمکاران ما تا ساعاتی دیگر با شما تماس خواهند گرفت.\\nآذین وین\",\n}",
        "detail": "sms.sms_texts",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "sms.urls",
        "description": "sms.urls",
        "peekOfCode": "urlpatterns = []\ndashboard_urls = [\n]\nurlpatterns += dashboard_urls",
        "detail": "sms.urls",
        "documentation": {}
    },
    {
        "label": "dashboard_urls",
        "kind": 5,
        "importPath": "sms.urls",
        "description": "sms.urls",
        "peekOfCode": "dashboard_urls = [\n]\nurlpatterns += dashboard_urls",
        "detail": "sms.urls",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "top_projects.migrations.0001_initial",
        "description": "top_projects.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='TopProject',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('eng_name', models.CharField(max_length=255, verbose_name='نام مهندس')),",
        "detail": "top_projects.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "top_projects.migrations.0002_remove_topproject_slug",
        "description": "top_projects.migrations.0002_remove_topproject_slug",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('top_projects', '0001_initial'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='topproject',\n            name='slug',\n        ),\n    ]",
        "detail": "top_projects.migrations.0002_remove_topproject_slug",
        "documentation": {}
    },
    {
        "label": "TopProjectsConfig",
        "kind": 6,
        "importPath": "top_projects.apps",
        "description": "top_projects.apps",
        "peekOfCode": "class TopProjectsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'top_projects'\n    verbose_name = \"پروژه های برتر\"",
        "detail": "top_projects.apps",
        "documentation": {}
    },
    {
        "label": "TopFilters",
        "kind": 6,
        "importPath": "top_projects.filters",
        "description": "top_projects.filters",
        "peekOfCode": "class TopFilters(filters.FilterSet):\n    search = filters.CharFilter(method=\"search_filter\")\n    status = filters.CharFilter(method=\"status_filter\")\n    limit = filters.CharFilter(method=\"limit_filter\")\n    @staticmethod\n    def search_filter(qs, name, value):\n        qs = qs.filter(\n            Q(title__icontains=value) |\n            Q(slug__icontains=value) |\n            Q(body__icontains=value)",
        "detail": "top_projects.filters",
        "documentation": {}
    },
    {
        "label": "TopProjectForm",
        "kind": 6,
        "importPath": "top_projects.forms",
        "description": "top_projects.forms",
        "peekOfCode": "class TopProjectForm(forms.ModelForm):\n    class Meta:\n        model = TopProject\n        exclude = ['created']\n        widgets = {\n            'body': forms.Textarea(attrs={'class': 'form-control'})\n        }",
        "detail": "top_projects.forms",
        "documentation": {}
    },
    {
        "label": "status_content_CHOICES",
        "kind": 5,
        "importPath": "top_projects.helpers",
        "description": "top_projects.helpers",
        "peekOfCode": "status_content_CHOICES = (\n    ('A', 'نشان داده شود'),\n    ('B', 'نشان داده نشود'),\n)",
        "detail": "top_projects.helpers",
        "documentation": {}
    },
    {
        "label": "TopProject",
        "kind": 6,
        "importPath": "top_projects.models",
        "description": "top_projects.models",
        "peekOfCode": "class TopProject(models.Model):\n    eng_name = models.CharField(max_length=255, verbose_name=\"نام مهندس\")\n    project_name = models.CharField(max_length=255, verbose_name=\"نام پروژه\")\n    # slug = models.SlugField(max_length=200, unique=True, blank=True, null=True, verbose_name=\"ادرس\")\n    body = models.TextField(verbose_name=\"توضیحاتی درباره پروژه\")\n    images_1 = models.ImageField(default='1.png', verbose_name=\"تصویر شماره 1\")\n    images_2 = models.ImageField(default='1.png', verbose_name=\"تصویر شماره 2\")\n    images_3 = models.ImageField(default='1.png', verbose_name=\"تصویر شماره 3\")\n    images_4 = models.ImageField(default='1.png', verbose_name=\"تصویر شماره 4\")\n    images_5 = models.ImageField(default='1.png', verbose_name=\"تصویر شماره 5\")",
        "detail": "top_projects.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "top_projects.urls",
        "description": "top_projects.urls",
        "peekOfCode": "app_name = \"top_projects\"\nurlpatterns = [\n    path('', views.TopProjectListView.as_view(), name='home_list_top_projects'),\n    path('dashboard/create', views.TopProjectCreateView.as_view(), name='create_top_projects'),\n    path('dashboard/list', views.TopProjectDashboardList.as_view(), name='list_top_projects'),\n    path('dashboard/edit/<int:pk>', views.TopProjectUpdateView.as_view(), name='update_top_projects'),\n    path('dashboard/delete/<int:pk>', views.TopProjecDashboardDelete.as_view(), name='delete_top_projects'),\n]",
        "detail": "top_projects.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "top_projects.urls",
        "description": "top_projects.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.TopProjectListView.as_view(), name='home_list_top_projects'),\n    path('dashboard/create', views.TopProjectCreateView.as_view(), name='create_top_projects'),\n    path('dashboard/list', views.TopProjectDashboardList.as_view(), name='list_top_projects'),\n    path('dashboard/edit/<int:pk>', views.TopProjectUpdateView.as_view(), name='update_top_projects'),\n    path('dashboard/delete/<int:pk>', views.TopProjecDashboardDelete.as_view(), name='delete_top_projects'),\n]",
        "detail": "top_projects.urls",
        "documentation": {}
    },
    {
        "label": "TopProjectListView",
        "kind": 6,
        "importPath": "top_projects.views",
        "description": "top_projects.views",
        "peekOfCode": "class TopProjectListView(View):\n    template_name = 'top_projects/list_top_project.html'\n    def get(self, request, *args, **kwargs):\n        top_projects = TopProject.objects.filter(status='A')\n        context = {'top_projects': top_projects}\n        return render(request, self.template_name, context)\nclass TopProjectCreateView(View):\n    form_class = TopProjectForm\n    template_name = 'top_projects/admin/create_edit.html'\n    def get(self, request, *args, **kwargs):",
        "detail": "top_projects.views",
        "documentation": {}
    },
    {
        "label": "TopProjectCreateView",
        "kind": 6,
        "importPath": "top_projects.views",
        "description": "top_projects.views",
        "peekOfCode": "class TopProjectCreateView(View):\n    form_class = TopProjectForm\n    template_name = 'top_projects/admin/create_edit.html'\n    def get(self, request, *args, **kwargs):\n        form = self.form_class\n        return render(request, self.template_name, {'form': form})\n    def post(self, request, *args, **kwargs):\n        form = self.form_class(request.POST)\n        if form.is_valid():\n            new_top_projects = form.save(commit=False)",
        "detail": "top_projects.views",
        "documentation": {}
    },
    {
        "label": "TopProjectUpdateView",
        "kind": 6,
        "importPath": "top_projects.views",
        "description": "top_projects.views",
        "peekOfCode": "class TopProjectUpdateView(LoginRequiredMixin, UpdateView):\n    form_class = TopProjectForm\n    template_name = 'top_projects/admin/create_edit.html'\n    def setup(self, request, *args, **kwargs):\n        self.top_projects = get_object_or_404(TopProject, pk=kwargs['pk'])\n        return super().setup(request, *args, **kwargs)\n    def dispatch(self, request, *args, **kwargs):\n        post = self.top_projects\n        return super().dispatch(request, *args, **kwargs)\n    def get(self, request, *args, **kwargs):",
        "detail": "top_projects.views",
        "documentation": {}
    },
    {
        "label": "TopProjecDashboardDelete",
        "kind": 6,
        "importPath": "top_projects.views",
        "description": "top_projects.views",
        "peekOfCode": "class TopProjecDashboardDelete(DeleteView):\n    model = TopProject\n    template_name = 'top_projects/admin/list.html'\n    success_url = reverse_lazy('top_projects:list_top_projects')\n    def dispatch(self, *args, **kwargs):\n        resp = super().dispatch(*args, **kwargs)\n        messages.success(self.request, 'آیتم مورد نظر با موفقیت حدف شد.')\n        return resp\nclass TopProjectDashboardList(LoginRequiredMixin, View):\n    template_name = 'top_projects/admin/list.html'",
        "detail": "top_projects.views",
        "documentation": {}
    },
    {
        "label": "TopProjectDashboardList",
        "kind": 6,
        "importPath": "top_projects.views",
        "description": "top_projects.views",
        "peekOfCode": "class TopProjectDashboardList(LoginRequiredMixin, View):\n    template_name = 'top_projects/admin/list.html'\n    def get(self, request, *args, **kwargs):\n        top_projects = TopProject.objects.all()\n        context = {'top_projects': top_projects}\n        return render(request, self.template_name, context)",
        "detail": "top_projects.views",
        "documentation": {}
    },
    {
        "label": "add_classes",
        "kind": 2,
        "importPath": "utils.templatetags.public_tags",
        "description": "utils.templatetags.public_tags",
        "peekOfCode": "def add_classes(value, arg):\n    '''\n    Add provided classes to form field\n    :param value: form field\n    :param arg: string of classes seperated by ' '\n    :return: edited field\n    '''\n    css_classes = value.field.widget.attrs.get('class', '')\n    # check if class is set or empty and split its content to list (or init list)\n    if css_classes:",
        "detail": "utils.templatetags.public_tags",
        "documentation": {}
    },
    {
        "label": "add_placeholder",
        "kind": 2,
        "importPath": "utils.templatetags.public_tags",
        "description": "utils.templatetags.public_tags",
        "peekOfCode": "def add_placeholder(value, placeholder):\n    value.field.widget.attrs['placeholder'] = placeholder\n    # join back to single string\n    return value\n@register.filter\ndef is_last_item(page_obj, items):\n    result = page_obj.end_index() - page_obj.paginator.count\n    if result == 0 and len(items) - 1 == 0:\n        return 'yes'\n    return 'no'",
        "detail": "utils.templatetags.public_tags",
        "documentation": {}
    },
    {
        "label": "is_last_item",
        "kind": 2,
        "importPath": "utils.templatetags.public_tags",
        "description": "utils.templatetags.public_tags",
        "peekOfCode": "def is_last_item(page_obj, items):\n    result = page_obj.end_index() - page_obj.paginator.count\n    if result == 0 and len(items) - 1 == 0:\n        return 'yes'\n    return 'no'\n@register.filter\ndef persian_int(string):\n    persianize = dict(zip(\"0123456789\", '۰۱۲۳۴۵۶۷۸۹'))\n    return ''.join(persianize[digit] if digit in persianize else digit for digit in str(string))\n@register.filter(name='get_request_GET_value')",
        "detail": "utils.templatetags.public_tags",
        "documentation": {}
    },
    {
        "label": "persian_int",
        "kind": 2,
        "importPath": "utils.templatetags.public_tags",
        "description": "utils.templatetags.public_tags",
        "peekOfCode": "def persian_int(string):\n    persianize = dict(zip(\"0123456789\", '۰۱۲۳۴۵۶۷۸۹'))\n    return ''.join(persianize[digit] if digit in persianize else digit for digit in str(string))\n@register.filter(name='get_request_GET_value')\ndef get_request_GET_value(value, arg):\n    \"\"\" value will be request.GET and arg is variable to fetch it's value. \"\"\"\n    try:\n        return value[arg]\n    except:\n        return ''",
        "detail": "utils.templatetags.public_tags",
        "documentation": {}
    },
    {
        "label": "get_request_GET_value",
        "kind": 2,
        "importPath": "utils.templatetags.public_tags",
        "description": "utils.templatetags.public_tags",
        "peekOfCode": "def get_request_GET_value(value, arg):\n    \"\"\" value will be request.GET and arg is variable to fetch it's value. \"\"\"\n    try:\n        return value[arg]\n    except:\n        return ''",
        "detail": "utils.templatetags.public_tags",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "utils.templatetags.public_tags",
        "description": "utils.templatetags.public_tags",
        "peekOfCode": "register = template.Library()\n@register.filter(name='addclass')\ndef add_classes(value, arg):\n    '''\n    Add provided classes to form field\n    :param value: form field\n    :param arg: string of classes seperated by ' '\n    :return: edited field\n    '''\n    css_classes = value.field.widget.attrs.get('class', '')",
        "detail": "utils.templatetags.public_tags",
        "documentation": {}
    },
    {
        "label": "UtilsConfig",
        "kind": 6,
        "importPath": "utils.apps",
        "description": "utils.apps",
        "peekOfCode": "class UtilsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'utils'",
        "detail": "utils.apps",
        "documentation": {}
    },
    {
        "label": "CustomModel",
        "kind": 6,
        "importPath": "utils.models",
        "description": "utils.models",
        "peekOfCode": "class CustomModel(models.Model):\n    created_at = models.DateTimeField(\n        auto_now_add=True,\n        verbose_name=\"تاریخ ثبت\"\n    )\n    updated_at = models.DateTimeField(\n        auto_now=True,\n        verbose_name=\"تاریخ ویرایش\"\n    )\n    # created_at = models.DateTimeField(",
        "detail": "utils.models",
        "documentation": {}
    },
    {
        "label": "MainTestMixin",
        "kind": 6,
        "importPath": "utils.tests",
        "description": "utils.tests",
        "peekOfCode": "class MainTestMixin(TestCase):\n    def setUp(self):\n        self.admin = User.objects.create_superuser(phone='09396988720', password='admin')\n        user = User.objects.create(phone='09396988730', password='user')\n        user.set_password('test')\n        user.save()\n        self.user = user\n        self.apiclient = APIClient()\n        self.client = Client()\n        teacher_role, _ = Role.objects.get_or_create(",
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "render_to_pdf",
        "kind": 2,
        "importPath": "utils.utils",
        "description": "utils.utils",
        "peekOfCode": "def render_to_pdf(template_src, context_dict):\n    template = get_template(template_src)\n    context = context_dict\n    html = template.render(context)\n    result = io.BytesIO()\n    pdf = pisa.pisaDocument(\n        io.BytesIO(html.encode(\"UTF-8\")),\n        dest=result)\n    if not pdf.err:\n        return HttpResponse(result.getvalue(), content_type='application/pdf')",
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "mobile_validator",
        "kind": 2,
        "importPath": "utils.validator",
        "description": "utils.validator",
        "peekOfCode": "def mobile_validator(mobile):\n    if not mobile:\n        return ''\n    m = re.search(mobile_pattern, mobile)\n    if not m:\n        return ''\n    mobile = '0' + str(m.group(2))\n    mobile = unidecode(mobile)  # Convert to english always!\n    return mobile\ndef validate_file_size(value):",
        "detail": "utils.validator",
        "documentation": {}
    },
    {
        "label": "validate_file_size",
        "kind": 2,
        "importPath": "utils.validator",
        "description": "utils.validator",
        "peekOfCode": "def validate_file_size(value):\n    filesize = value.size\n    if filesize > 5000 * 1024:\n        raise forms.ValidationError(\"حداکثر حجم قابل آپلود 5 کیلوبایت است.\")\n    else:\n        return value",
        "detail": "utils.validator",
        "documentation": {}
    },
    {
        "label": "national_id_regex",
        "kind": 5,
        "importPath": "utils.validator",
        "description": "utils.validator",
        "peekOfCode": "national_id_regex = RegexValidator(\n    regex=r\"^\\d{10}$\",\n    message=\"شناسه ملی معتبر نیست.\"\n)\nmobile_regex = RegexValidator(\n    regex=r'(^\\+?(09|98|0)?(9([0-9]{9}))$)',\n    message=\"شماره موبایل معتبر نیست.\"\n)\nmobile_pattern = r'^\\+?(09|98|0)?(9([0-9]{9}))$'\ndef mobile_validator(mobile):",
        "detail": "utils.validator",
        "documentation": {}
    },
    {
        "label": "mobile_regex",
        "kind": 5,
        "importPath": "utils.validator",
        "description": "utils.validator",
        "peekOfCode": "mobile_regex = RegexValidator(\n    regex=r'(^\\+?(09|98|0)?(9([0-9]{9}))$)',\n    message=\"شماره موبایل معتبر نیست.\"\n)\nmobile_pattern = r'^\\+?(09|98|0)?(9([0-9]{9}))$'\ndef mobile_validator(mobile):\n    if not mobile:\n        return ''\n    m = re.search(mobile_pattern, mobile)\n    if not m:",
        "detail": "utils.validator",
        "documentation": {}
    },
    {
        "label": "mobile_pattern",
        "kind": 5,
        "importPath": "utils.validator",
        "description": "utils.validator",
        "peekOfCode": "mobile_pattern = r'^\\+?(09|98|0)?(9([0-9]{9}))$'\ndef mobile_validator(mobile):\n    if not mobile:\n        return ''\n    m = re.search(mobile_pattern, mobile)\n    if not m:\n        return ''\n    mobile = '0' + str(m.group(2))\n    mobile = unidecode(mobile)  # Convert to english always!\n    return mobile",
        "detail": "utils.validator",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    },
    {
        "label": "IsAdminUserMixin",
        "kind": 6,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "class IsAdminUserMixin(UserPassesTestMixin):\n    def test_func(self):\n        return self.request.user.is_authenticated and self.request.user.is_admin",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "send_otp_code",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def send_otp_code(phone_number, code):\n    try:\n        api = KavenegarAPI('4F6F707A425949384C447834314270686D61726B6666483067674355434E6457572F4D51516945505430413D')\n        params = {\n            'sender': '',\n            'receptor': phone_number,\n            'message': f'{code} کد تایید شما '\n        }\n        response = api.sms_send(params)\n        print(response)",
        "detail": "utils",
        "documentation": {}
    }
]